<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-topic-status.Ready for Review,Tags/okta-authors.Jeanette Smith" MadCap:onlyLocalStylesheets="False" MadCap:searchable="True">
    <head><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="description" content="Configure the Okta Template App and Okta Plugin Template App to create new integrations. Admins can select supported templates, like POST and HTTP Basic Auth." />
    </head>
    <body>
        <h1>Configure the Okta Template App and Okta Plugin Template App</h1>
        <p>Template apps allow you to create application integrations in real time on a running system. </p>
        <p>To create custom apps, choose from these common Secure Web Authentication (SWA) template apps: </p>
        <p MadCap:conditions="Primary.do-not-publish">There are two common SWA template apps that you can use to create apps on demand. The <span class="uicontrol">Template App</span> does a POST to a sign-in page, while the <span class="uicontrol">Template Plugin App</span> uses a plugin to POST. These template apps allow you to create application integrations in real time on a running system. </p>
        <ul>
            <li><span class="uicontrol">Template App</span>: If the app supports authenticating through a form POST</li>
            <li><span class="uicontrol">Template Plugin App</span>: If the app site has username, password, or submit button fields on the page</li>
            <li><span class="uicontrol">Template App 3 Fields</span>: Similar to Template Plugin App. If an app page has other fields such as <span class="uicontrol">Company ID</span></li>
            <li><span class="uicontrol">Template 2 Page Plugin App</span>: Also similar to the Template Plugin App. If the sign-in flow is spread over two separate pages. This template doesn't support Browser plugin auto-submit</li>
            <li><span class="uicontrol">Template Basic Auth App</span>: If the app supports basic auth</li>
            <li><span class="uicontrol">Template Frame Plugin App</span>: If the app supports iframes</li>
        </ul>
        <h2>Procedure</h2>
        <ol>
            <li>
                <MadCap:snippetBlock src="../../Resources/Snippets/task steps/Applications_Applications.flsnp" />
            </li>
            <li>Click <span class="uicontrol">Browse App Catalog</span>.</li>
            <li>Search for <span class="userinput">Template</span>.</li>
            <li>From the search results, add the desired type of template app: <ul><li><MadCap:xref href="#TemplateAppDropdown"> Template App</MadCap:xref></li><li><MadCap:xref href="#ConfigureTemplatePlugin">Template Plugin App/Template App 3 Fields/Template 2 Page Plugin App/Template Frame Plugin App
        </MadCap:xref> </li><li><p><MadCap:xref href="#Template">Template Basic Auth App</MadCap:xref></p></li></ul></li>
            <h3><a name="TemplateAppDropdown"></a> <span class="wintitle">Template App</span></h3>
            <p>Use the template app if the app supports authenticating through a form POST to the specified URL. It contains the username and password of a user filled in with the named parameters and static fields that you provide.</p>
            <p>Enter information in the  <span class="wintitle">General Settings</span> page.</p>
            <ul>
                <li><span class="uicontrol">URL</span>: Enter the URL of the login form to which you're submitting the POST (not the URL where you view the form).</li>
                <li><span class="uicontrol">Username parameter</span> and <span class="uicontrol">Password parameter</span> fields: Enter the parameter names that contain the username and password data.</li>
                <li><span class="uicontrol">Optional parameter</span> fields: Enter extra static field data in the name/value pairs. For help with determining what to enter in these optional fields, click <MadCap:toggler targets="OptionalFields" style="color: #0000ff;">here</MadCap:toggler>.</li>
                <div MadCap:targetName="OptionalFields" class="note">
                    <ul>
                        <li>From the Chrome browser, log in to the app you want to integrate with. </li>
                        <li>Use Chrome developer tools to view the traffic that is being sent to the page. </li>
                        <li>Open to the page with the target login form, and switch to the <span class="wintitle">Network</span> tab.</li>
                        <li>Select the <span class="uicontrol">Preserve log</span> checkbox.</li>
                        <li>Clear out the existing traffic and perform your login.</li>
                        <li>In the <span class="uicontrol">Headers</span> tab, click the <span class="uicontrol">POST</span> to the page to see all the data posted and the URL to which it's being sent.</li>
                    </ul>
                </div>
                <li><span class="uicontrol">Application Visibility</span>: Specify whether to display the application icon to users.</li>
                <li><span class="uicontrol">Browser plugin auto-submit</span>: Specify whether to log users in automatically when they land on the login page.</li>
            </ul>
            <h3><a name="ConfigureTemplatePlugin"></a>Template Plugin App/Template App 3 Fields/Template 2 Page Plugin App/Template Frame Plugin App
        </h3>
            <p><span class="uicontrol">Knowing when to use the Template Plugin or Template Plugin 3 Fields app</span>
            </p>
            <p>If the app has cross-site request forgery XSRF protection, you need to use the Template Plugin App or Template Plugin 3 Fields app. To check, inspect the page to see if the server generated an XSRF token. Also look for fields such as <code style="font-size: 10pt; font-style: normal;">EVENTVALIDATION</code> or <code style="font-size: 10pt; font-style: normal;">FORMVALIDATION</code> which are generated on asp pages. In such cases, the Template Plugin App is required.</p>
            <p class="beta">When you configure a <span class="uicontrol">Template Plugin App</span> or <span class="uicontrol">Template Frame Plugin App</span>, you provide CSS selectors to the relevant fields because the plugin is used to populate these fields.</p>
            <p>Enter information in the  <span class="wintitle">General Settings</span> page.</p>
            <ul>
                <li><span class="uicontrol">Application label</span>: Enter the label that you want to display under the app on the end users' home page.</li>
                <li><span class="uicontrol">Login URL</span>: Enter the URL of the log-in form (the actual URL where you can view the form). </li>
                <li><span class="uicontrol">Frame URL</span>: Enter the Frame URL (the URL that contains the frame)</li>
                <li><span class="uicontrol">Redirect URL</span>: If going to the login page URL redirects to another page, then enter that URL&#160;here.</li>
                <li><span class="uicontrol">Regular Expression</span>: (Optional) This allows you to create a regular expression that serves as an allow list. This is done to improve app security by restricting access to the URLs that match the pattern that you define. For example, if your log-in URL is <span class="url">https://example.com/login</span>, and your change password URL&#160;is <span class="url">https://example.com/change_password</span>, then you can create a regular expression that matches <span class="url">https://example.com/(login|change_password)</span>.  </li>
                <li><span class="uicontrol">Username field</span>: Enter the CSS selector for the username field.</li>
                <li><span class="uicontrol">Password field</span>: Enter the CSS selector for the password field.</li>
                <li><span class="uicontrol">Login Button</span>: Enter the CSS selector for the login button.</li>
                <li><span class="uicontrol">Checkbox</span>: Enter the CSS selector for the checkbox (for example, the checkbox for the Remember me, Agree terms, and so forth).</li>
                <li><span class="uicontrol">Next Button</span>: Enter the CSS selector for the next button that would redirect you to the next page.</li>
                <li><span class="uicontrol">Extra Field Selector</span>: Enter the CSS selector for the extra field.</li>
                <li><span class="uicontrol">Extra Field Value</span>: Enter the value for the extra field.</li>
            </ul>
            <div class="noteOkta">
                <ul>
                    <li>The fields you see depend upon the type of template you're configuring.</li>
                    <li>If no regular expression field is provided, Okta generates a secure regular expression from the <span class="uicontrol">Login URL</span> that omits the path from the URL. For example, if you specify <span class="url">https://www.example.com/login</span>, the Okta-generated regular expression is <span class="codeph">(?:^https://example\.com(?:$|/))</span>.<p>The login path is omitted, the URL is escaped, and the resulting URL is surrounded with <span class="code">(?:^</span> and <span class="code">(?:$|/))</span>.</p></li>
                </ul>
            </div>
            <h4 class="h4">Find the CSS selector fields
				</h4>
            <p>When you configure a <span class="uicontrol">Template Plugin App</span>, you provide CSS selectors to the relevant fields because the plugin is used to populate these fields.</p>
            <p>To determine the CSS selectors, inspect the individual elements on a page. Using the Chrome developer tools:</p>
            <ol>
                <li>Open to the page containing the target login form.</li>
                <li>Right-click an input field or button and select the <span class="uicontrol">Inspect</span> option to see the actual Document Object Model (DOM) element. In the  <span class="wintitle">Elements</span> tab, view the <span class="varname">id</span> and <span class="varname">class</span> of the element and, using this information, compose a CSS selector.</li>
            </ol>
            <p>You may need the full hierarchy when you can't uniquely identify elements by <span class="varname">id</span> or <span class="varname">class</span>. For the Okta Sign In page, for example, the selectors would be:</p>
            <ul>
                <li><span class="uicontrol">Username</span>: <span class="userinput">#okta-signin-username</span> </li>
                <p MadCap:targetName="username">
                    <img src="../../Resources/Images/InspectElement_username.png" id="img_new" />
                </p>
                <li><span class="uicontrol">Password</span>: <span class="userinput">#okta-signin-password</span> </li>
                <p MadCap:targetName="password">
                    <img src="../../Resources/Images/InspectElement_password.png" id="img_new" />
                </p>
                <li><span class="uicontrol">Button</span>: <span class="userinput">#okta-signin-submit</span> </li>
                <p MadCap:targetName="submit">
                    <img src="../../Resources/Images/InspectElement_submit.png" id="img_new" />
                </p>
            </ul>
            <p>In cases where the app only uses a <span class="varname">name</span> attribute, and not <span class="varname">id</span> for its username, password, or submit buttons, you can try using <span class="userinput">input[type="text"]</span>. For example, you can use <span class="userinput">input[type="password"]</span> for a password, and <span class="userinput">input[type="submit"]</span> for a submit button. Other attributes can be queried; for example, <span class="userinput">input[class="btn"]</span> as an alternate way to specify the submit button. </p>
            <h5>Cases where the Template Plugin App doesn't work
				</h5>
            <p>The Template Plugin App isn't effective for sites that:</p>
            <ul>
                <li class="Apple-tab-span">Contain much dynamic HTML creation. Sites like this may fail with this approach because the elements the plugin is looking for aren't present when the plugin fires.</li>
                <li>Require a parameter beyond just username and password. Use Template Plugin App 3 Fields if the parameter is static and doesn't change.</li>
                <li>Have multiple steps in the login process, or load multiple pages between the initial URL and the one that contains the form.</li>
            </ul>
            <p>You can address the previous cases with a plugin integration, but not within the context of the Plugin Template App. If you encounter such a case, you must write the app integration by hand. Contact the Okta Professional Services team to discuss pricing for the app.</p>
            <h3><a name="Template"></a>Template Basic Auth App</h3>
            <p>Use this template if your app supports basic authentication. </p>
            <p MadCap:targetName="BasicAuth">
                <img src="../../Resources/Images/BasicAuthModal.png" id="img_new" />
            </p>
            <ul>
                <li><span class="uicontrol">Application label</span>: Enter the label to display under the app on end users' home page.</li>
                <li><span class="uicontrol">URL</span>: Enter the URL of the login form (the actual URL where you can view the form). </li>
                <li><span class="uicontrol">Auth URL</span>: Enter the URL&#160;of the authenticating site for the app.  </li>
                <li><span class="uicontrol">Application Visibility</span>: Specify whether to display the application icon to users.</li>
                <li><span class="uicontrol">Browser plugin auto-submit</span>: Specify whether to log users in automatically when they land on the login page.</li>
            </ul>
        </ol>
        <h2>Known issue</h2>
        <p>The Template Plugin App can't work in cases where the app's login page redirects users back to the URL they came from, as this creates an infinite loop. The SWA application must redirect the user to the website's home page, not back to the login page. This means that the login page accepts the user's credentials, then redirect the user back to the Okta home page.</p>
        <h2>Related topic</h2>
        <p>
            <MadCap:xref href="Apps_Configure_Okta Template_WS_Federation.htm">Configuring the Okta Template WS Federation Application</MadCap:xref>
        </p>
    </body>
</html>