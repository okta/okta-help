<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Patrick Calnan">
    <head><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1>Global Session Policy</h1>
        <p MadCap:conditions="Primary.do-not-publish">Identity Engine provides a <MadCap:variable name="okta-feature-names.Okta sign-on policy" /> that you can use in lieu of <MadCap:variable name="okta-feature-names.app sign-on policies" />. </p>
        <p>In this scenario, the work is at the org level. All apps require a password and a secondary authentication method (from any authenticator made available). All apps have a default policy.</p>
        <p><span class="uicontrol">Note</span>: We included this use case so you can see how to use a <MadCap:variable name="okta-feature-names.Okta sign-on policy" /> in a similar fashion to how you use Okta sign-on policies in <MadCap:variable name="okta-feature-names.Classic Engine" />, but this use case does not use <MadCap:variable name="okta-feature-names.app sign-on policies" />. Everything is done by the <MadCap:variable name="okta-feature-names.Okta sign-on policy" />.</p>
        <p>You can also optionally configure an <MadCap:variable name="okta-feature-names.app sign-on policy" /> that requires one hardware-protected authentication method for an app with more rigorous security requirements. This <MadCap:variable name="okta-feature-names.app sign-on policy" /> will limit the authenticators for the second authentication method to Okta Verify.</p>
        <h2>Setup and configuration</h2>
        <ul>
            <li>You can turn off <MadCap:variable name="okta-feature-names.Okta FastPass" /> if it's already turned on in your org, but it won't be used by a <MadCap:variable name="okta-feature-names.Okta sign-on policy" />.</li>
            <li>Optionally add a user and group to assign the <MadCap:variable name="okta-feature-names.Okta sign-on policy" /> to.</li>
            <li>Create an app integration so that the user has something to sign in to. If you're just testing the scenario, you can use a bookmark app to see how it works. In your scenario, the app would be one of your business apps. The app will use all default values and will also use the default catch-all rule so it applies to all users. </li>
        </ul>
        <h2>User sign-in experience</h2>
        <p>When a user signs in to the app, they see the Okta Sign-In Widget asking for a name and password. This is because the default catch-all rule only allows a password authentication method.</p>
        <p>After the user enters a password, they see a dialog with choices for additional authentication methods that satisfies the <MadCap:variable name="okta-feature-names.Okta sign-on policy" />. The list contains the authenticators that the user has enabled.</p>
        <h2>Optional: Add a higher assurance app</h2>
        <p>For one special higher assurance app, add an <MadCap:variable name="okta-feature-names.app sign-on policy" /> that requires a hardware protected-authentication method. In this scenario, this limits the authenticators to <span class="uicontrol">Password or FIDO2(WebAuthn) </span>+ <span class="uicontrol">Okta Verify</span>.</p>
        <h2>User sign-in experience</h2>
        <p>You can see the difference in the user sign-in experience. For example, when a user signs in to a low assurance app, they need two authentication methods to sign in. Both password and phone (SMS) are required. However, factors are not equal in terms of the protection they offer. You can require different factors to deploy different assurance levels. For example, if you change the requirements from a password to <MadCap:variable name="okta-feature-names.Okta Verify" />, it's more secure even though you haven't added a second factor.</p>
        <p><span class="uicontrol">Note</span>: Okta Verify is both an inherence and possession factor type when you use biometrics. You can see this in action by using different authenticators when signing in.</p>
        <ol>
            <li>Sign in to the bookmark app.</li>
            <li>Sign in to the higher assurance app you created. Depending on what you have configured for the user, you should see a verification prompt for a push notification or other authenticator.</li>
            <li>In a new browser (or incognito tab), sign in to the bookmark app again, using password and Okta Verify.</li>
            <li>Sign in to the higher assurance app. You will not see an additional prompt because Okta Verify satisfies the <MadCap:variable name="okta-feature-names.app sign-on policy" />.</li>
        </ol>
    </body>
</html>