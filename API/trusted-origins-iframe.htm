<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
      MadCap:fileTags="Tags/okta-authors.Nikita Apraj"
      MadCap:conditions="MultiProdPublish.Classic+OIE">
   <head>
      <title>[%=Heading.Level1%] | Okta</title>
   </head>
   <body>
      <h1>Trusted Origins for iFrame embedding</h1>
      <p MadCap:conditions="Primary.do-not-publish">IFRAME_EMBEDDING_USING_CSP_HEADER
EA 2022.05.0 GA PRE 2022.07.0</p>
      <p>Using Trusted Origins for iFrame embedding, you can allow origins that you trust to embed Okta sign-in pages and Okta resources. This method is more secure than the current iFrame Embedding option in Customizations that is based on <span class="code">x-frame-options</span>. With the Customizations option, any resource can be embedded into any site. However, with Trusted Origins you can ensure that only the origins you trust can embed your resources.</p>
      <h2>How it works</h2>
      <p>Trusted Origins use Content Security Policy's (CSP) <span class="code">frame-ancestors</span> directive. Its <span class="code">frame-ancestors</span> directive specifies parent pages that may embed a page using an iFrame. Trusted Origins lets you configure an origin which is returned by Okta in the <span class="code">frame-ancestors</span> directive of the CSP header.</p>
      <p>Whether or not the CSP <span class="code">frame-ancestors</span> directive is enforced depends on the user's browser. Browsers that support CSP <span class="code">frame-ancestors</span> directive enforce it and give it precedence over <span class="code">x-frame-options</span>.

In the absence of CSP and <span class="code">x-frame-options</span>, the resource can be embedded by anyone into any site. When  <span class="code">x-frame-options</span> is set to <span class="code">SAMEORIGIN</span>, the resource can only be displayed in a frame on the same origin as the page itself.
</p>
      <p>For developer documentation, see <a href="https://developer.okta.com/docs/reference/api/trusted-origins/">Trusted Origins API</a>.</p>
      <h2>Before you begin</h2>
      <p>Trusted origins for iFrame embedding work only when the iFrame embedding under <span class="menucascade">
            <span class="uicontrol">Customizations</span>
            <span class="uicontrol">Other</span>
            <span class="uicontrol">Enable iFrame Embedding</span>
         </span> is not in use. We recommend that you first embed all Trusted Origins you need and then turn off the Customizations option, if you have enabled it. This ensures that your existing iFrames are not unintentionally broken.
</p>
      <h2>Start this procedure</h2>
      <p>You can either create a new Trusted Origin or migrate an existing iFrame to Trusted Origins:
</p>
      <p>
         <MadCap:xref href="#1.">1. Embed an Okta sign-in page or Okta resource in an iFrame</MadCap:xref>
      </p>
      <p>
         <MadCap:xref href="#2.">2. Embed Okta End-User Dashboard in an iFrame</MadCap:xref>
      </p>
      <p>
         <MadCap:xref href="#3.">3. Migrate from Customizations iFrame to Trusted Origins</MadCap:xref>
      </p>
      <h3>
         <a name="1."/>1. Embed an Okta sign-in page or Okta resource in an iFrame</h3>
      <p>These instructions are for embedding a new page or resource in an iFrame using Trusted Origins. If you are migrating an existing iFrame from Customizations to Trusted Origins, see <MadCap:xref href="#3.">3. Migrate from Customizations iFrame to Trusted Origins</MadCap:xref>.</p>
      <p>In the <span class="uicontrol">Admin Console</span>:</p>
      <ol>
         <li>
            <p>Go to <span class="menucascade">
                  <span class="uicontrol">Security</span>
                  <span class="uicontrol">API</span>
                  <span class="uicontrol">Trusted Origins</span>
               </span> tab.</p>
         </li>
         <li>
            <p>Click <span class="uicontrol">Add Origin</span>.</p>
         </li>
         <li>
            <p>
            In the <span class="wintitle">Add Origin</span> dialog, enter <span class="uicontrol">Origin Name</span> and <span class="uicontrol">Origin URL</span>.</p>
         </li>
         <li>
            <p>
               <p>Select the origin type as <span class="uicontrol">iFrame embed (origin)</span>.</p>
               <div class="note_cautionOkta">
                  <p class="noteContent">This keeps <span class="code">frame-ancestors</span> in <span class="code">report-only</span> if you have enabled iFrame embedding in <span class="uicontrol">Customizations</span>.</p>
               </div>
            </p>
         </li>
         <li>
            <p>
               <p>Disable  iFrame embedding in <span class="uicontrol">Customizations</span>: </p>
               <p>Click the <span class="uicontrol">iFrame embedding</span> link displayed in the warning message in the <span class="uicontrol">Admin Console</span>, or go to <span class="menucascade">
                     <span class="uicontrol">Customizations</span>
                     <span class="uicontrol">Other</span>
                     <span class="uicontrol">iFrame Embedding</span>
                  </span>, and uncheck <span class="uicontrol">Enable iFrame embedding</span>.</p>
            </p>
         </li>
         <li>
            <p>Back in the <span class="wintitle">Add Origin</span> dialog, click <span class="uicontrol">Save</span>.</p>
         </li>
      </ol>
      <p>You've now enabled an Okta sign-in experience or an Okta-protected resource in an iFrame.</p>
      <h3>
         <a name="2."/>2. Embed Okta End-User Dashboard in an iFrame</h3>
      <ol>
         <li>
            <p>Follow the instructions 1-5 in <MadCap:xref href="#1.">1. Embed an Okta sign-in page or Okta resource in an iFrame</MadCap:xref>.</p>
         </li>
         <li>
            <p>Back in the <span class="wintitle">Add Origin</span> dialog, check the <span class="uicontrol">Allows iFrame embedding of the Okta End-User Dashboard</span> box.</p>
         </li>
         <li>
            <p>Click <span class="uicontrol">Save</span>.</p>
         </li>
      </ol>
      <p>You've now enabled Okta End-user Dashboard in an iFrame. You can also customize the embedded dashboard. </p>
      <h3>
         <a name="3."/>3. Migrate from Customizations iFrame to Trusted Origins</h3>
      <ol>
         <li>
            <p>Identify all iFrames configured through <span class="menucascade">
                  <span class="uicontrol">Customizations</span>
                  <span class="uicontrol">Other</span>
                  <span class="uicontrol">Enable iFrame Embedding</span>
               </span>.</p>
         </li>
         <li>
            <p>Configure these iFrames using Trusted Origins as explained in <MadCap:xref href="#1.">1. Embed an Okta sign-in page or Okta resource in an iFrame</MadCap:xref>.</p>
            <div class="note_cautionOkta">
               <p class="noteContent">Don't disable iFrame embedding in <span class="uicontrol">Customizations</span> yet. This will keep <span class="code">frame-ancestors</span> in <span class="code">report-only</span> so you can confirm that the new iFrame is working as expected before making it live.</p>
            </div>
         </li>
         <li>
            <p>Check for any origins you might have missed. You will need to manually check different resources you've embedded through Okta for CSP violations in the browser.</p>
         </li>
         <li>
            <p>Correct any CSP violations.</p>
         </li>
         <li>
            <p>Once you ensure that all trusted origins are working properly, uncheck iframe embedding in <span class="menucascade">
                  <span class="uicontrol">Customizations</span>
                  <span class="uicontrol">Other</span>
                  <span class="uicontrol">Enable iFrame Embedding</span>
               </span>. This will make all Trusted Origins live.</p>
         </li>
      </ol>
      <h2>Disable this feature</h2>
      <p>Disabling this feature may break existing iFrames. You can verify that your iFrames are working properly by visiting the page that embeds Okta sign-in pages or Okta-resources in an iFrame.</p>
      <h2>FAQs</h2>
      <h4>How are Trusted Origins different from iFrame embedding in Customizations?</h4>
      <p>The iFrame embedding in Customizations uses <span class="code">x-frame-options</span>. When this option is not enabled, Okta uses the <span class="code">SAMEORIGIN</span> directive and restricts iFrame embedding to the same origin as the Okta org. When this option is enabled, Okta does not send the <span class="code">SAMEORIGIN</span> header, thus any origin can embed Okta resources in an iFrame. Trusted Origins use CSP <span class="code">frame-ancestors</span> directive. This directive specifies which parent pages may embed a page using an iFrame.</p>
      <h4>What if my org has both types of embedding enabled?</h4>
      <p>If your org has iFrame embedding enabled using both the Customizations option and the Trusted Origins method, Okta sends CSP <span class="code">frame-ancestors</span> in <span class="code">report-only</span> header as a precaution. This means that the iFrames configured through Trusted Origins will stay in monitoring mode unless you disable iFrame embedding under <span class="uicontrol">Customizations</span>.
</p>
      <h4>What should I know before switching iFrames from Customizations to Trusted Origins?</h4>
      <p>In a test org, configure all origins where you require iFrame embedding using Trusted Origins. Disable the Customizations option, and make sure that the newly configured iFrames are working properly. Then repeat the same procedure in your production org.</p>
      <h2>Known Issues</h2>
      <ul>
         <li>
            <p>Third-party integrated URLs don't work with iFrame embedding if the third-party app doesn't allow it. For example, you've integrated a Salesforce instance in your Okta org. If the Salesforce app doesn't allow iFrame embedding, you cannot embed the app in an iFrame using Trusted Origins.</p>
         </li>
         <li>
            <p>The third-party app must also support iFrame embedding. If it relies on cookies for session management, the cookie must be <span class="code">Secure</span> and have <span class="code">SameSite=None</span> to work in Chrome.</p>
         </li>
         <li>
            <p>Enrolling in or verifying with a WebAuthn factor doesn't work when this feature is enabled. Hosting the iFrame in a domain that's different from the org domain causes the WebAuthn authentication to fail. This is because WebAuthn is designed to block authentication across different domains. To display the iFrame in a domain that's different from the org domain and allow the WebAuthn authentication to authenticate users, edit the HTML attribute of the iFrame code with this setting:</p>
            <p>
               <span class="code">&lt;iframe src="..." allow="publickey-credentials-get *" /&gt;</span>
            </p>
            <p>Where <span class="code">*</span> is your non-Okta webpage domain.</p>
         </li>
         <li>
            <p>End users enrolling in an authenticator from the embedded <span class="menucascade">
                  <span class="uicontrol">End-User Dashboard</span>
                  <span class="uicontrol">Settings</span>
               </span> are exited out of the iFrame. The enrollment happens outside the iFrame.</p>
         </li>
         <li>
            <p>If an embedding app has its own CSP, modify it appropriately to allow the Okta org in its <span class="code">frame-src</span> directive.</p>
         </li>
         <li>
            <p>If the browser doesn't support CSP, it defaults to <span class="code">x-frame-options</span>. Check the browser documentation to find out whether it supports CSP.</p>
         </li>
         <li>
            <p>If an embedded Okta Access Gateway (OAG) resource has <span class="code">x-frame-options</span> set to <span class="code">SAMEORIGIN</span>, the resource is not displayed in the iFrame even though the user successfully signed in.</p>
         </li>
         <li>
            <p>The resource isn't displayed properly in an iFrame if the CSP header is missing.</p>
         </li>
         <li>
            <p>Adding too many trusted origins can cause the HTTP header size to exceed the limit allowed by server software such as NginX. In such cases, you may need to update the default server limits or reduce the number of trusted origins in Okta.</p>
         </li>
      </ul>
   </body>
</html>
