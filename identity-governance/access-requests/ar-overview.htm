<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-topic-status.In Progress,Tags/okta-authors.Naini Khajanchi" MadCap:onlyLocalStylesheets="False" MadCap:searchable="True">
    <head>
        <link href="../../../Resources/TableStyles/standard.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>[%=Heading.Level1%]</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="description" content="Learn about Okta Access Requests and how it fits into Okta Identity Governance." />
    </head>
    <body>
        <div>
            <h1>Access Requests</h1>
            <MadCap:snippetBlock src="../snippets/iga-banner.flsnp" />
            <p>Directly integrated into an <MadCap:variable name="okta-variables.ProductName" /> organization, <MadCap:variable name="okta-variables.ProductName" /> <MadCap:variable name="okta-feature-names.Access Requests" /> automates the process of requesting access to applications and resources. Expanding on Okta's existing self-service offerings, <MadCap:variable name="okta-feature-names.Access Requests" /> delivers a simplified and frictionless approach that automatically routes user requests to one or more approvers for action.</p>
            <p>This allows <MadCap:variable name="okta-feature-names.Access Requests" /> to eliminate the challenges common in more traditional workflows:</p>
            <ul>
                <li>Poor request experience</li>
                <li>Risk of human error</li>
                <li>Decreased IT productivity</li>
                <li>Complex and rigid workflows</li>
                <li>Audit and compliance deficiencies</li>
            </ul>
            <div>
                <h2>Roles</h2>
                <p><MadCap:variable name="okta-feature-names.Access Requests" /> meets the needs of several different organizational roles.</p>
                <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                    <col class="TableStyle-standard-Column-Column1" style="width: 15%;" />
                    <col class="TableStyle-standard-Column-Column1" />
                    <thead>
                        <tr class="TableStyle-standard-Head-Header1">
                            <th class="TableStyle-standard-HeadF-Column1-Header1">Role</th>
                            <th class="TableStyle-standard-HeadD-Column1-Header1">Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyF-Column1-Body1">Requester</td>
                            <td class="TableStyle-standard-BodyD-Column1-Body1">
                                Requesters want to quickly request access to specific resources using common productivity tools such as chat, email, or web. 
                            </td>
                        </tr>
                        <tr class="TableStyle-standard-Body-Body2">
                            <td class="TableStyle-standard-BodyF-Column1-Body2">Approver</td>
                            <td class="TableStyle-standard-BodyD-Column1-Body2">
                                <p>Approvers need clear visibility and context for requests, so they understand what to approve and for whom.</p>
                                <p>Approvers need to review approvals using common productivity tools such as chat, email, web to minimize bottlenecks and resolve requests.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyC-Column1-Body1">Admin</td>
                            <td class="TableStyle-standard-BodyA-Column1-Body1">
                                <p>Admins want to construct unique, no-code blueprints that ensure that stakeholders take appropriate actions before completing a request.</p>
                                <p>Admins want to orchestrate automated request fulfillment so teams aren’t responsible for managing low-risk access requests.</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div>
            <h2><a name="Components"></a>Components</h2>
            <p><MadCap:variable name="okta-feature-names.Access Requests" /> uses a combination of the following components:</p>
            <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                <col class="TableStyle-standard-Column-Column1" style="width: 15%;" />
                <col class="TableStyle-standard-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-Head-Header1">
                        <th class="TableStyle-standard-HeadF-Column1-Header1">Components</th>
                        <th class="TableStyle-standard-HeadD-Column1-Header1">Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:variable name="okta-feature-names.Access Requests" /> Teams</td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">
                            <div>
                                <p>Use teams to organize users into logical groups within Access Requests. See <MadCap:xref href="ar-team-create.htm">Create an [%=okta-feature-names.Access Requests%] team</MadCap:xref>.</p>
                                <p>Teams can create Request Types and manage any associated requests.</p>
                                <p>You can also associate one or more teams with a Request Type to allow those teams to manage the Request Type and incoming requests for that Request Type. <MadCap:variable name="okta-variables.ProductName" /> recommends that you use groups instead of teams for handling approval tasks within a Request Type.</p>
                                <p>Add a team to a resource to use the resource in automated tasks.</p>
                            </div>
                        </td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">Request Types</td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">Request Types are collections of tasks used to define how to process a request.
                        <p>Each Request Type is made of one or more tasks that are routed to approvers for review. <MadCap:variable name="okta-feature-names.Access Requests" /> teams create and own Request Types. See <MadCap:xref href="ar-request-types.htm">[%=okta-feature-names.Access Requests%] Request Types</MadCap:xref>.</p></td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">Audiences</td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">Audiences control which users can submit a request with a specific Request Type.<p>Teams can make Request Types available to everyone, or limited to specific <MadCap:variable name="okta-feature-names.Access Requests" /> teams or <MadCap:variable name="okta-variables.ProductName" /> groups.</p></td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">Request assignees</td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">Assignees manage a request after it’s submitted and are always members of the <MadCap:variable name="okta-feature-names.Access Requests" /> Team that owns the Request Type.<p>Assignees are responsible for reassigning individual tasks or approvals to ensure that the request is quickly completed.</p></td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1" MadCap:conditions="">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <p>Resources</p>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">
                            <p>Resources are synced directly from your integrations. Currently, Access Requests can sync resources from Okta, Jira, and Service Now.</p>
                            <p>You can create a configuration list from a resource and use it in a Request Type. You can't modify a resource from the Access Requests Console.</p>

                            <p>By default, <MadCap:variable name="okta-feature-names.Access Requests" /> syncs with the associated Okta org and creates resources, such as Applications, Okta groups, and <MadCap:variable name="okta-feature-names.Okta Workflows" />.</p>
                            <div class="noteOkta">

                                <p class="noteContent">The <span class="uicontrol"><MadCap:variable name="okta-feature-names.Okta Workflows" /></span> option is only available in the <MadCap:variable name="okta-feature-names.Access Requests" /> console if you have enabled the <MadCap:variable name="okta-feature-names.Okta Workflows" /> actions in <MadCap:variable name="okta-feature-names.Access Requests" /> and <MadCap:xref href="../../Security/custom-admin-role/work-with-admin.htm#Assign_admin_roles_to_apps">Assign admin roles to apps</MadCap:xref> features for your org, and assigned Okta Access Request OAuth app as an admin. <MadCap:variable name="okta-feature-names.Okta Workflows" /> actions in <MadCap:variable name="okta-feature-names.Access Requests" /> is an <MadCap:snippetText src="../../ReleaseNotes/Snippets/2021/10/ea.flsnp" />. To learn how to enable it, see <MadCap:xref href="../../Security/manage-EA-and-beta-features.htm">Manage Early Access and Beta features</MadCap:xref>. Also, see <MadCap:xref href="ar-create-request-type.htm#BeforeYouBegin">Before you begin</MadCap:xref>.</p>
                            </div>
                        </td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2" MadCap:conditions="">
                        <td class="TableStyle-standard-BodyC-Column1-Body2">
                            <p>Configuration lists</p>
                        </td>
                        <td class="TableStyle-standard-BodyA-Column1-Body2">
                            <p>Configuration lists are customized collections of resources or admin-defined values. They determine which applications or groups that a team can use in a Request Type. Use them in Request Types to specify options available to your end users or control how automated actions work within a Request Type.</p>
                            <p>You must create separate configuration lists for each resource type.</p>
                            <p>For example, while creating a Request Type, you want to make some groups available for admins to assign to requesters. In addition, you want to make some applications available for a user to request. In this case, you must create a configuration list for applications and another one for groups.</p>
                            <p>There are two types of configuration lists:</p>
                            <ul>
                                <li>
                                    <p>Resource lists</p>
                                    <p>Resource lists are configuration lists that you create from resources. To automate access to resources, create resource lists and reference them in Request Types.</p>
                                    <p>For example, you want your end users to only be able to request access to applications available to their specific Okta groups. You can create a resource list, which includes the applications that are available to your end users. Next, reference the resource list in a Request Type and configure the Request Type to be available only to members of specific Okta groups.</p>
                                    <p>Note: You can’t create a Workflows-based resource list.</p>
                                </li>
                                <li>
                                    <p>Custom lists</p>
                                    <p>Custom lists are admin-defined lists of values that you can reference in a Request Type. These aren't associated with a resource. Use custom lists to better meet the needs of your organization.</p>
                                    <p>For example, a team creates a custom list that lists available laptop models. When a requester submits a laptop request, they can select one of the available models as they make the request.</p>
                                </li>
                            </ul>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>