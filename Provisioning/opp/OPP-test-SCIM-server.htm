<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"
      MadCap:onlyLocalStylesheets="False"
      MadCap:searchable="True"
      MadCap:fileTags="Tags/okta-authors.Nikita Apraj">
   <head>
      <link href="../../../Resources/TableStyles/standard.css"
            rel="stylesheet"
            MadCap:stylesheetType="table"/>
      <title>[%=Heading.Level1%] | Okta</title>
      <link href="" rel="stylesheet" type="text/css"/>
      <meta name="description"
            content="Validate the response from your SCIM connector or SCIM server."/>
   </head>
   <body>
      <h1>Test SCIM connectors for on-premises provisioning</h1>
      <p>
         <MadCap:variable name="okta-variables.ProductName"/> provides a utility to test  SCIM connectors built with the <MadCap:variable name="okta-variables.ProductName"/> Provisioning Connector SDK or any custom SCIM connector or SCIM server. You don't have to connect to <MadCap:variable name="okta-variables.ProductName"/> and the <MadCap:variable name="okta-feature-names.Okta Provisioning Agent"/> to test your connector. </p>
      <p>The testing utility is part of the <MadCap:variable name="okta-variables.ProductName"/> Provisioning Connector SDK package, available on the <MadCap:variable name="okta-variables.ProductName"/> Downloads page. To obtain the <MadCap:variable name="okta-variables.ProductName"/> Provisioning Connector SDK package, sign in to the <MadCap:variable name="okta-feature-names.Administrator dashboard"/> and select <span class="menucascade">
            <span class="uicontrol">Settings</span>
            <span class="uicontrol">Downloads</span>
         </span>. Then click <span class="uicontrol">Download</span> for the <MadCap:variable name="okta-variables.ProductName"/> Provisioning Connector SDK.</p>
      <p>The testing utility is contained in the <span class="code">scim-sdk-test.jar</span> in the tester folder of the <MadCap:variable name="okta-variables.ProductName"/> Provisioning Connector SDK. Documentation for the testing utility is provided in the <span class="code">tester/README.TXT</span> file. The primary focus of the tests is to validate the response from your SCIM connector or SCIM server.</p>
      <h2>Test data</h2>
      <p>Test data is in the <span class="code">.json</span> files in the <span class="code">tester/data</span> directory. You can use or modify these files to test your connector. All the tests assume that the input data is valid. Edit or create the sample data files carefully.</p>
      <h2>Running tests</h2>
      <p>Run the tests by using the <span class="code">scim-sdk-tests.jar</span> file. To see all possible arguments, run the jar without any arguments.</p>
      <p>
         <span class="code">java -jar scim-sdk-tests.jar</span>
      </p>
      <p>Complete testing information including calls, responses, all options, and sample results are shown in the <span class="code">tester/README.TXT</span> file. The following code shows a typical test call. The minimum number of parameters are passed.</p>
      <ul>
         <li>
            <span class="code">url:</span> The base URL of the SCIM server</li>
         <li>
            <span class="code">method:</span> The <MadCap:variable name="okta-variables.ProductName"/> provisioning method to test</li>
         <li>
            <span class="code">file:</span> The input data file</li>
      </ul>
      <h3>Sample test call</h3>
      <p>The following is a sample test call:</p>
      <p>
         <span class="codeblock">java -jar scim-sdk-tests.jar -url http://localhost:8080 -method createNewUser -file data/createNewUser.json</span>
      </p>
      <h3>Tester usage</h3>
      <p>To see all possible arguments, run the jar without any arguments.</p>
      <p>
         <span class="code">java -jar scim-sdk-tests.jar</span>
      </p>
      <p>usage: scim-sdk-tests</p>
      <p>The following table details the arguments that you can pass.</p>
      <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');"
             class="TableStyle-standard"
             cellspacing="0">
         <col class="TableStyle-standard-Column-Column1"/>
         <col class="TableStyle-standard-Column-Column1"/>
         <tbody>
            <tr class="TableStyle-standard-Body-Body1">
               <td style="font-weight: bold;background-color: #d3d3d3;"
                   class="TableStyle-standard-BodyF-Column1-Body1">Argument</td>
               <td style="font-weight: bold;background-color: #d3d3d3;"
                   class="TableStyle-standard-BodyD-Column1-Body1">Description</td>
            </tr>
            <tr class="TableStyle-standard-Body-Body2">
               <td class="TableStyle-standard-BodyF-Column1-Body2">
                  <span class="code">-arg &lt;propertyName=propertyValue&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyD-Column1-Body2">Pass any property name and value pair for your method to use.</td>
            </tr>
            <tr class="TableStyle-standard-Body-Body1">
               <td class="TableStyle-standard-BodyF-Column1-Body1">
                  <span class="code">-expectResults &lt;true|false&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyD-Column1-Body1">Set test expectations on if results should come back from the connector for the current method. This can be used with the following methods: checkUserExists, downloadUsers, downloadGroups, and importUserProfile.</td>
            </tr>
            <tr class="TableStyle-standard-Body-Body2">
               <td class="TableStyle-standard-BodyF-Column1-Body2">
                  <span class="code">-file &lt;fileName&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyD-Column1-Body2">The data file to use as input for the current method. Sample files are provided in the data directory of the testing utility package.</td>
            </tr>
            <tr class="TableStyle-standard-Body-Body1">
               <td class="TableStyle-standard-BodyF-Column1-Body1">
                  <span class="code">-header &lt;headerName=headerValue&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyD-Column1-Body1">Any additional HTTP header that you want sent to the SCIM server. For example, X-Internal-AuthHeader=secret</td>
            </tr>
            <tr class="TableStyle-standard-Body-Body2">
               <td class="TableStyle-standard-BodyF-Column1-Body2">
                  <span class="code">-method &lt;methodName&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyD-Column1-Body2">
                  <p>
                     <span class="code">createNewUser</span>
                  </p>
                  <p>HTTP requests sent:

</p>
                  <p>GET /Users?filter=userName=myemail@domain.com&amp;startIndex=1&amp;count=100

</p>
                  <p>POST /Users
</p>
                  <p>
If testing a connector built using <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester passes a User object to create a user using your connector. Tests the connector method SCIMService.createUser</p>
                  <p>
                     <span class="code">createPendingUser</span>
                  </p>
                  <p>Http requests sent:</p>
                  <p>POST /Users</p>
                  <p>If you're testing a connector built using the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester passes a User object to create a pending user using your connector. It tests the connector method SCIMService.createUser.</p>
                  <p>
                     <span class="code">downloadUsers</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>GET /Users?startIndex=1&amp;count=100</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to return the full list of users. It tests the connector method SCIMService.getUsers (without a filter).</p>
                  <p>
                     <span class="code">checkUserExists</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>/Users?filter=userName=myemai@domain.com&amp;startIndex=1&amp;count=100</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to check if a specific user exists. It requires the following properties: userIdFieldName and userIdFieldValue. It tests the connector method SCIMService.getUsers (with a filter).</p>
                  <p>
                     <span class="code">importUserProfile</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>GET /Users/&lt;Id&gt;</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to return a single user, passing it the user's ID. It requires the additional property, id. It tests the connector method SCIMService.getUser</p>
                  <p>
                     <span class="code">activateUser</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>PUT /Users/&lt;id&gt;</p>
                  <p>If you're testing a connector built with <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to activate an existing user. It tests the connector method SCIMService.updateUser.</p>
                  <p>
                     <span class="code">deactivateUser</span>
                  </p>
                  <p>HTTP requests sent</p>
                  <p>PUT /Users/&lt;id&gt;:</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to deactivate an existing user. It tests the connector method SCIMService.updateUser.</p>
                  <p>
                     <span class="code">reactivateUser</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>PUT /Users/&lt;id&gt;</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to reactivate an existing user. It tests the connector method SCIMService.updateUser.</p>
                  <p>
                     <span class="code">pushPasswordUpdate</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>PUT /Users/&lt;id&gt;</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to update the password of an existing user. It tests the connector method SCIMService.updateUser pushProfileUpdate – <MadCap:variable name="okta-variables.ProductName"/> asks your connector to update the properties of an existing user. It tests the connector method SCIMService.updateUser.</p>
                  <p>
                     <span class="code">deleteGroup</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>DELETE /Groups/&lt;id&gt;</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to delete a group. It tests the connector method SCIMService.deleteGroup.</p>
                  <p>
                     <span class="code">updateGroup</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>PUT /Groups/&lt;id&gt;</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to update a group. It tests the connector method SCIMService.updateGroup.</p>
                  <p>
                     <span class="code">createGroup</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>POST /Groups</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to create a group. It tests the connector method SCIMService.createGroup.</p>
                  <p>
                     <span class="code">getGroupById</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester queries your connector to return a group based on the ID. It tests the connector method SCIMService.getGroup.</p>
                  <p>
                     <span class="code">downloadGroups</span>
                  </p>
                  <p>HTTP requests sent:</p>
                  <p>GET  /Groups?startIndex=1&amp;count=100</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester asks your connector to return the full list of groups. It tests the connector method SCIMService.getGroups.</p>
                  <p>
                     <span class="code">getImplementedUserManagementCapabilities</span>
                  </p>
                  <p>HTTP request sent:</p>
                  <p>GET /ServiceProviderConfigs</p>
                  <p>If you're testing a connector built with the <MadCap:variable name="okta-variables.ProductName"/> Connector SDK, the tester asks your connector to return the list of UserManagementCapabilities your connector has implemented. Tests the connector method SCIMService.getImplementedUserManagementCapabilities</p>
               </td>
            </tr>
            <tr class="TableStyle-standard-Body-Body1">
               <td class="TableStyle-standard-BodyC-Column1-Body1">
                  <span class="code">-url &lt;url&gt;</span>
               </td>
               <td class="TableStyle-standard-BodyA-Column1-Body1">The URL of the SCIM server to use. Example:http://acme.com:8080</td>
            </tr>
         </tbody>
      </table>
      <h2>Examples</h2>
      <p>The default implementation provided by <MadCap:variable name="okta-variables.ProductName"/> assumes that the appname is onprem_app. The following examples and the input data files in the data folder of the default implementation use the custom schema name (urn:okta:onprem_app:1.0:user) for the App User custom schemas. When you implement the connector you need to use the correct appname.</p>
      <ul>
         <li>
            <p>
               <MadCap:xref href="#createNe">createNewUser</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#createPe">createPendingUser</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#download">downloadUsers</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#checkUse">checkUserExists</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#importUs">importUserProfile</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#activate">activateUser</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#deactiva">deactivateUser</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#reactiva">reactivateUser</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#pushPass">pushPasswordUpdate</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#pushProf">pushProfileUpdate</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#download2">downloadGroups</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#getGroup">getGroupById</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#createGr">createGroup</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#updateGr">updateGroup</MadCap:xref>
            </p>
         </li>
         <li>
            <p>
               <MadCap:xref href="#deleteGr">deleteGroup</MadCap:xref>
            </p>
         </li>
      </ul>
      <h3>
         <a name="createNe"/>createNewUser</h3>
      <p>createNewUser passes a SCIM User object in an attempt to create a user using your connector. It tests the SCIMService.createUser connector SDK method. There are two supplied example data files to test with.</p>
      <p>The following test sends the SCIM user defined in the createNewUser.json file to your SCIM connector. Some basic validation is performed on the user returned from your connector.</p>
      <p>
         <span class="codeblock" xml:space="preserve">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method createNewUser -file data/createNewUser.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 04-10-2013 13:23:01.258 ] [ INFO] - making POST request to http://localhost:8080/Users
[ 04-10-2013 13:23:01.449 ] [ INFO] - <MadCap:variable name="okta-variables.ProductName"/> will use the ID 103 to identify this User in the future.
[ 04-10-2013 13:23:01.450 ] [ INFO] - User returned from connector:
schemas: "urn:scim:schemas:core:1.0", "urn:scim:schemas:extension:enterprise:1.0"
phoneNumbers:
value: "123-444-5555"
type: "mobile"
userName: "myemail@domain.com"
name:
familyName: "LastName"
givenName: "FirstName"
active: true
emails:
primary: true
value: "myemail@domain.com"
type: "primary"
primary: false
value: "mypersonalemail@domain.com"
type: "secondary"
password: "verySecure"
id: "103"
[ 04-10-2013 13:23:01.450 ] [ INFO] - OK!
</span>
      <h3>
         <a name="createPe"/>createPendingUser</h3>
      <p>createPendingUser passes a SCIM User object in an attempt to create a pending user using your connector. It tests the SCIMService.createUser connector SDK method. There are two supplied example data files to test with.</p>
      <p>createPendingUser is similar to createNewUser except the <span class="codeph">active</span> field for all users is <span class="codeph">false</span>.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method createPendingUser -file data/createPendingUser-withCustomExtension.json</span>
      </p>
      <h3>
         <a name="download"/>downloadUsers</h3>
      <p>downloadUsers asks your connector to return the full list of users. It tests the SCIMService.getUsers connector method without passing it a filter.</p>
      <p>The following test makes a request to your SCIM connector asking for all users. The returned users are logged to disk. The test could make multiple requests to your connector if multiple pages of users exist.</p>
      <p>
         <span class="code">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method downloadUsers</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 04-10-2013 14:14:18.888 ] [ INFO] - making GET request to http://localhost:8080/Users?startIndex=1&amp;count=100
[ 04-10-2013 14:14:19.003 ] [ INFO] - downloadUsers: 3 Users returned.
[ 04-10-2013 14:14:19.007 ] [ INFO] - downloadUsers: Users returned from connector logged to downloadUsers-20131004-141419.txt
</span>
      <h3>
         <a name="checkUse"/>checkUserExists</h3>
      <p>checkUserExists asks your connector if a specific user exists. It tests the SCIMService.getUsers connector method by passing it a filter. Requires the additional properties: userIdFieldName and userIdFieldValue.</p>
      <p>The following test uses the supplied properties to make a request to your SCIM connector. The test assumes that your SCIM connector won't find a user with the userName myemail@domain.com.</p>
      <p>The test should return output similar to the sample response.</p>
      <p>
         <span class="codeblock" xml:space="preserve">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method checkUserExists -arg userIdFieldName=userName -arg userIdFieldValue=myemail@domain.com \
                               -expectResults false</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 03-10-2013 14:54:16.741 ] [ INFO] - making GET request to http://localhost:8080/Users?filter=userName%20eq%20%22myemail%40dom...
[ 03-10-2013 14:54:16.846 ] [ INFO] - checkUserExists: No users returned from server. This should be expected.
[ 03-10-2013 14:54:16.846 ] [ INFO] - OK!
</span>
      <h4>Usage</h4>
      <p>Running the following code (omitting the <span class="codeph">-expectResults</span> argument from the previous command) should cause the tests to fail:</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method checkUserExists -arg userIdFieldName=userName -arg userIdFieldValue=myemail@domain.com</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 03-10-2013 14:57:41.218 ] [ INFO] - making GET request to http://localhost:8080/Users?filter=userName%20eq%20%22myemail%40dom...
[ 03-10-2013 14:57:41.319 ] [ ERROR] - Expected results from checkUserExists but did not get anything.
</span>
      <p>When your connector finds a user, the user data and some <MadCap:variable name="okta-variables.ProductName"/> debugging information are output:</p>
      <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method checkUserExists -arg userIdFieldName=id -arg userIdFieldValue=102</span>
      <h5>Response:</h5>
      <span class="codeblock">[ 03-10-2013 15:01:14.095 ] [ INFO] - making GET request to http://localhost:8080/Users?filter=id%20eq%20%22102%22&amp;startInd...
[ 03-10-2013 15:01:14.217 ] [ INFO] - checkUserExists: 1 users returned.
[ 03-10-2013 15:01:14.217 ] [ INFO] - checkUserExists: User returned from Connector:
schemas: "urn:scim:schemas:core:1.0", "urn:scim:schemas:extension:enterprise:1.0", "urn:okta:onprem_app:1.0:user"
id: "102"
userName: "admin"
name:
formatted: "SCIM firstname2 SCIM lastname2"
givenName: "SCIM first2"
familyName: "SCIM last2"
middleName: "SCIM middle2"
emails:
value: "SCIM_admin@okta.com"
primary: true
type: "work"
active: false
password: "god"
groups:
value: "1002"
display: "secondGroup"
urn:okta:onprem_app:1.0:user:
isAdmin: true
isOkta: false
departmentName: "Administration"
[ 03-10-2013 15:01:14.217 ] [ INFO] - checkUserExists: The ID 102 will be used as the id for this user in <MadCap:variable name="okta-variables.ProductName"/>
[ 03-10-2013 15:01:14.217 ] [ INFO] - checkUserExists: The user will be returned as INACTIVE
[ 03-10-2013 15:01:14.218 ] [ INFO] - OK!
</span>
      <h4>Use Cases</h4>
      <p>How to search for a user by first name:</p>
      <p>
         <span class="codeblock">java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method checkUserExists -arg userIdFieldName=name.givenName -arg userIdFieldValue="SCIM first"</span>
      </p>
      <p>How to search for a user by a custom schema extension property:</p>
      <span class="codeblock" xml:space="preserve">java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method checkUserExists -arg userIdFieldName=urn:okta:onprem_app:1.0:user:departmentName \
                              -arg userIdFieldValue="Cloud Service"</span>
      <h3>
         <a name="importUs"/>importUserProfile</h3>
      <p>importUserProfile asks your connector to return a single user by passing it the user's ID. It tests the SCIMService.getUser connector method. Requires the additional property: id.</p>
      <p>The following test makes a request to your SCIM connector asking for a user with the id of 101.</p>
      <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method importUserProfile -arg id=101</span>
      <h5>Response:</h5>
      <span class="codeblock">[ 04-10-2013 13:57:54.092 ] [ INFO] - making GET request to http://localhost:8080/Users/101
[ 04-10-2013 13:57:54.203 ] [ INFO] - importUserProfile: User returned from Connector:
schemas: "urn:scim:schemas:core:1.0", "urn:scim:schemas:extension:enterprise:1.0", "urn:okta:onprem_app:1.0:user"
id: "101"
userName: "okta"
name:
formatted: "SCIM firstname SCIM lastname"
givenName: "SCIM first"
familyName: "SCIM last"
middleName: "SCIM middle"
emails:
value: "SCIM_okta@okta.com"
primary: true
type: "work"
active: true
password: "inSecure"
groups:
value: "1001"
display: "firstGroup"
value: "1002"
display: "secondGroup"
urn:okta:onprem_app:1.0:user:
isAdmin: false
isOkta: true
departmentName: "Cloud Service"
[ 04-10-2013 13:57:54.204 ] [ INFO] - importUserProfile: The ID 101 will be used as the id for this user in <MadCap:variable name="okta-variables.ProductName"/>
[ 04-10-2013 13:57:54.204 ] [ INFO] - OK!
</span>
      <h4>Use Cases</h4>
      <p>The following shows how to search for a user that you expect not to exist:</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method importUserProfile -arg id=invalidExternalId -expectResults false</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 04-10-2013 14:00:01.081 ] [ INFO] - making GET request to http://localhost:8080/Users/invalidExternalId
[ 04-10-2013 14:00:01.245 ] [ WARN] - error status of 404 received from http://localhost:8080/Users/invalidExternalId
[ 04-10-2013 14:00:01.245 ] [ INFO] - importUserProfile: No users returned from server. This should be expected.
[ 04-10-2013 14:00:01.246 ] [ INFO] - OK!
</span>
      <p>The following shows how to search for a user that you expect to find, but no result is returned:</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method importUserProfile -arg id=103</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 04-10-2013 14:00:52.096 ] [ INFO] - making GET request to http://localhost:8080/Users/103
[ 04-10-2013 14:00:52.191 ] [ WARN] - error status of 404 received from http://localhost:8080/Users/103
[ 04-10-2013 14:00:52.191 ] [ ERROR] - Expected results from importUserProfile but did not get anything.
</span>
      <h3>
         <a name="activate"/>activateUser</h3>
      <p>activateUser asks your connector to activate an existing user. It tests the SCIMService.updateUser connector method.</p>
      <p>The test below makes a request to your SCIM connector asking you to update the User. Since this is a test to activate the user, the active field is always true.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method activateUser -file data/activateUser.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 10-10-2013 14:29:00.211 ] [ INFO] - making PUT request to http://localhost:8080/Users/101
[ 10-10-2013 14:29:00.598 ] [ INFO] - activateUser: will return to <MadCap:variable name="okta-variables.ProductName"/> that the user's active state is: true
[ 10-10-2013 14:29:00.598 ] [ INFO] - OK!
</span>
      <h3>
         <a name="deactiva"/>deactivateUser</h3>
      <p>deactivateUser asks your connector to deactivate an existing user. It tests the SCIMService.updateUser connector method.</p>
      <p>The following test makes a request to your SCIM connector asking you to update the User. Since this is a test to deactivate the user, the active field is always false.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method deactivateUser -file data/deactivateUser.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 10-10-2013 14:32:51.211 ] [ INFO] - making PUT request to http://localhost:8080/Users/101
[ 10-10-2013 14:32:52.171 ] [ INFO] - NOTE: deactivateUser does not send the user returned from the connector back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a
                                            non-error response from your connector means the deactivateUser methods was successful.
[ 10-10-2013 14:32:52.598 ] [ INFO] - OK!
</span>
      <h3>
         <a name="reactiva"/>reactivateUser</h3>
      <p>reactivateUser asks your connector to activate a previously deactivated user. It tests the SCIMService.updateUser connector method.</p>
      <p>The following test makes a request to your SCIM connector asking you to update the User. Since this is a test to reactivate the user, the active field will always be true.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method reactivateUser -file data/reactivateUser.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 10-10-2013 14:35:04.704 ] [ INFO] - making PUT request to http://localhost:8080/Users/101
[ 10-10-2013 14:35:04.828 ] [ INFO] - NOTE: reactivateUser does not send the user returned from the connector back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a
                                            non-error response from your connector means the reactivateUser methods was successful.
[ 10-10-2013 14:35:04.828 ] [ INFO] - OK!</span>
      <h3>
         <a name="pushPass"/>pushPasswordUpdate</h3>
      <p>pushPasswordUpdate asks your connector to update the password of an existing user. It tests the SCIMService.updateUser connector method.</p>
      <p>The following test makes a request to your SCIM connector asking you to update the User. Even though on the password has changed, the entire user object will be supplied to you.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method pushPasswordUpdate -file data/pushPasswordUpdate.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 10-10-2013 14:36:52.029 ] [ INFO] - making PUT request to http://localhost:8080/Users/101
[ 10-10-2013 14:36:52.124 ] [ INFO] - NOTE: pushPasswordUpdate does not send the user returned from the connector back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a
                                            non-error response from your connector means the pushPasswordUpdate methods was successful.
[ 10-10-2013 14:36:52.124 ] [ INFO] - OK!
</span>
      <h3>
         <a name="pushProf"/>pushProfileUpdate</h3>
      <p>pushProfileUpdate asks your connector to update the properties of an existing user. It tests the SCIMService.updateUser connector method.</p>
      <p>The following test makes a request to your SCIM connector asking you to update the User. The entire user object is supplied to you, not an object that only contains the changed fields.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080/ -method pushProfileUpdate -file data/pushProfileUpdate.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 10-10-2013 14:39:44.693 ] [ INFO] - making PUT request to http://localhost:8080/Users/101
[ 10-10-2013 14:39:44.785 ] [ INFO] - NOTE: pushProfileUpdate does not send the user returned from the connector back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a
                                            non-error response from your connector means the pushProfileUpdate methods was successful.
[ 10-10-2013 14:39:44.786 ] [ INFO] - OK!</span>
      <h3>
         <a name="download2"/>downloadGroups</h3>
      <p>downloadGroups asks your connector to return the full list of groups. It tests the SCIMService.getGroups connector method.</p>
      <p>The following test makes a request to your SCIM connector asking for all groups and the returned groups are logged to disk. The test can make multiple requests to your connector if multiple pages of groups exist.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method downloadGroups</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 10-10-2013 14:40:55.598 ] [ INFO] - making GET request to http://localhost:8080/Groups?startIndex=1&amp;count=100
[ 10-10-2013 14:40:55.816 ] [ INFO] - downloadGroups: 2 Groups returned.
[ 10-10-2013 14:40:55.819 ] [ INFO] - downloadGroups: Groups returned from connector logged to downloadGroups-20131010-144055.txt
[ 10-10-2013 14:40:55.820 ] [ INFO] - OK!</span>
      <h3>
         <a name="getGroup"/>getGroupById</h3>
      <p>getGroupById asks your connector to return a group based on the supplied ID. This tests the SCIMService.getGroup connector method. Requires the additional property: id.</p>
      <p>The following test makes a request to your SCIM connector asking you to return the Group. All the properties of the group will be printed.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method getGroupById -arg id=1002</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 17-10-2013 18:03:17.270 ] [ INFO] - making GET request to http://localhost:8080/Groups/1002
[ 17-10-2013 18:03:17.381 ] [ INFO] - getGroupById : Group returned from connector:
schemas: "urn:scim:schemas:core:1.0", "urn:okta:custom:group:1.0"
id: "1002"
members:
value: "User-001"
display: "First User"
value: "User-002"
display: "Second User"
displayName: "AppGroup-Changed"
urn:okta:custom:group:1.0:
description: "This is the changed first group"
[ 17-10-2013 18:03:17.381 ] [ INFO] - OK!</span>
      <p>If no group is found for the id, then the output is similar to the following response:</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method getGroupById -arg id=3455</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 18-10-2013 10:22:40.733 ] [ INFO] - making GET request to http://localhost:8080/Groups/3455
[ 18-10-2013 10:22:40.833 ] [ WARN] - error status of 404 received from http://localhost:8080/Groups/3455
[ 18-10-2013 10:22:40.833 ] [ ERROR] - Expected results from getGroupById but did not get anything.
</span>
      <h3>
         <a name="createGr"/>createGroup</h3>
      <p>createGroup sends a group to the connector so that it can be created. This tests the SCIMService.createGroup connector method.</p>
      <p>If the same group exists on your system, you should throw a DuplicateGroupException.</p>
      <p>The test below makes a request to your SCIM connector asking you to create the group and return it. All the properties of the group will be printed.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method createGroup -file data/createGroup.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock">[ 17-10-2013 18:09:02.457 ] [ INFO] - making POST request to http://localhost:8080/Groups
[ 17-10-2013 18:09:02.564 ] [ INFO] - <MadCap:variable name="okta-variables.ProductName"/> will use the ID 1004 to identify this Group in the future.
[ 17-10-2013 18:09:02.564 ] [ INFO] - Group returned from connector:
schemas: "urn:scim:schemas:core:1.0", "urn:okta:custom:group:1.0"
id: "1004"
members:
value: "User-003"
display: "Third User"
value: "User-004"
display: "Fourth User"
value: "User-005"
display: "Fifth User"
displayName: "AppGroup-02"
urn:okta:custom:group:1.0:
description: "This is the second group"
[ 17-10-2013 18:09:02.565 ] [ INFO] - OK!
</span>
      <p>The following example shows the output when the connector throws a DuplicateGroupException when asked to create a group:</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method createGroup -file data/createGroup.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 18-10-2013 10:29:49.473 ] [ INFO] - making POST request to http://localhost:8080/Groups
[ 18-10-2013 10:29:49.576 ] [ WARN] - error status of 409 received from http://localhost:8080/Groups
[ 18-10-2013 10:29:49.577 ] [ ERROR] - Cannot create the group [{
  "schemas": ["urn:scim:schemas:core:1.0", "urn:okta:custom:group:1.0"],
  "displayName": "AppGroup-02",
  "id": "1004",
  "members" : [{"value": "User-003", "display": "Third User"},{"value": "User-004", "display": "Fourth User"},{"value": "User-005",
                "display": "Fifth User"}],
  "urn:okta:custom:group:1.0":{
    "description":"This is the second group"
  }
}]. It already exists
[ 18-10-2013 10:29:49.577 ] [ ERROR] - Duplicate group found. Cannot create the group
</span>
      <h3>
         <a name="updateGr"/>updateGroup</h3>
      <p>updateGroup sends a group to the connector so that it can be updated. This tests the SCIMService.updateGroup connector method.</p>
      <p>The following test makes a request to your SCIM connector asking you to update the group and return it.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method updateGroup -file data/updateGroup.json</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 17-10-2013 18:11:11.842 ] [ INFO] - making PUT request to http://localhost:8080/Groups/1002
[ 17-10-2013 18:11:11.939 ] [ INFO] - NOTE: updateGroup does not send the group returned from the connector back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a
                                            non-error response from your connector means the updateGroup methods was successful.
[ 17-10-2013 18:11:11.939 ] [ INFO] - OK!</span>
      <h3>
         <a name="deleteGr"/>deleteGroup</h3>
      <p>deleteGroup sends an ID to the connector so that the group with that ID can be deleted. This tests the SCIMService.deleteGroup connector method. Requires the additional property: id.</p>
      <p>An EntityNotFoundException should be thrown if a group with that id does not exist.</p>
      <p>The test below makes a request to your SCIM connector asking you to delete the group.</p>
      <p>
         <span class="codeblock">$ java -jar scim-sdk-tests.jar -url http://localhost:8080 -method deleteGroup -arg id=1003</span>
      </p>
      <h5>Response:</h5>
      <span class="codeblock" xml:space="preserve">[ 17-10-2013 18:16:27.553 ] [ INFO] - making DELETE request to http://localhost:8080/Groups/1003
[ 17-10-2013 18:16:27.646 ] [ INFO] - NOTE: deleteGroup does not send any data back to <MadCap:variable name="okta-variables.ProductName"/>. <MadCap:variable name="okta-variables.ProductName"/> assumes that a non-error response from your connector
                                            means the deleteGroup was successful and the group with the Id 1003 was deleted
[ 17-10-2013 18:16:27.646 ] [ INFO] - OK</span>
      <h2>Next steps</h2>
      <p>
         <MadCap:xref href="OPP-connect-SCIM-connector.htm">Connect to a SCIM connector</MadCap:xref>
      </p>
      <h2>Related topics</h2>
      <p>
         <MadCap:xref href="OPP-build-SCIM-using-SDK.htm">Create SCIM connectors for on-premises provisioning using SDK</MadCap:xref>
      </p>
      <p>
         <MadCap:xref href="OPP-create-SCIM-connectors.htm">Create SCIM connectors for on-premises provisioning</MadCap:xref>
      </p>
      <p style="text-decoration: none;">
         <MadCap:xref href="OPP-provision-SCIM-messages.htm">SCIM messages for on-premises provisioning</MadCap:xref>
      </p>
   </body>
</html>
