<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:onlyLocalStylesheets="False" MadCap:searchable="True" MadCap:fileTags="Tags/okta-authors.Patrick Calnan" MadCap:conditions="MultiProdPublish.Classic+OIE">
    <head><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="description" content="Use expressions to concatenate attributes, manipulate strings, convert data types, and more." />
    </head>
    <body>
        <h1><a name="Expressions"></a>About expressions</h1>
        <p>You use expressions  to concatenate attributes, manipulate strings, convert data types, and more.  Expressions within attribute mappings let you modify attributes before they are stored in <MadCap:variable name="okta-variables.ProductName" /> or sent to apps. Expressions  also help maintain data integrity and formats across apps. For example, you might want to use an email prefix as a username, bulk replace an email suffix, or populate attributes based on a combination of existing attributes (<code>displayName = lastName, firstName</code>).  </p>
        <p><MadCap:variable name="okta-variables.ProductName" /> supports a subset of the Spring Expression Language (SpEL) functions. See <a href="http://developer.okta.com/docs/getting_started/okta_expression_lang.html" target="_self">Okta Expression Language</a>. </p>
        <p>While some functions (namely <code>string</code>) work in other areas of the product (for example, SAML 2.0 Template attributes and custom username formats), not all do.</p>
        <h2><a name="UsernameOverrides"></a>User name overrides</h2>
        <p>You can use  the <MadCap:variable name="okta-variables.ProductName" /> Expression Language to create custom <MadCap:variable name="okta-variables.ProductName" /> application user names. These are some examples of how this can be done:</p>
        <ul>
            <li>Construct an <MadCap:variable name="okta-variables.ProductName" /> username by concatenating multiple imported attributes.</li>
            <li>Create differently formatted user names using conditionals. For example

					<ul><li>If <code>attribute1</code> = A, then username should end in <span class="uicontrol">acme.com</span>. Otherwise, username should end in <span class="uicontrol">acme-temp.com</span>.</li><li>Example: john.doe@acme.com<span>, </span>john.doe@acme-temp.com</li><li>This is useful for distinguishing between different types of users (such as employees vs. contractors).</li></ul></li>
            <li>Construct app user names from attributes in various sources.</li>
            <li>Enforce a max length by truncating.</li>
        </ul>
        <p>The username override feature overrides previously selected <MadCap:variable name="okta-variables.ProductName" /> or app user name formats. When you implement a user name override, the previously selected user name formats no longer apply.</p>
        <p>You can also use user name override functionality with Selective Attribute Push to continuously update app user names as user profile information changes. For example, when the user name changes in an app that uses an email address for the user name format, <MadCap:variable name="okta-variables.ProductName" /> can automatically update the app user name to the new email address.</p>
        <h2>App user name overrides</h2>
        <p>To change the app user name format, you select an option in the <span class="uicontrol">Application username format</span> list  on the app <span class="uicontrol">Sign On</span> page. The user name mapping displayed on the app <span class="uicontrol">Sign On</span> page is the source of truth for the <MadCap:variable name="okta-variables.ProductName" /> to App flow.&#160;Changing when the app user name is updated is also completed on the  app <span class="uicontrol">Sign On</span> page.</p>
        <p>For  Active Directory (AD), LDAP&#160;and SAML&#160;Identify Provider apps, you use the Profile Editor to override user name mappings.</p>
    </body>
</html>