<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:onlyLocalStylesheets="False" MadCap:fileTags="Tags/okta-authors.Patrick Calnan" MadCap:searchable="True" style="" MadCap:conditions="MultiProdPublish.Classic+OIE">
    <head><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="description" content="An overview topic that provides information about custom user types in Universal Directory." />
    </head>
    <body>
        <h1>About custom user types in Universal Directory</h1>
        <p><MadCap:variable name="okta-variables.ProductName" /> supports up to 10 user types. This number includes the default <MadCap:variable name="okta-variables.ProductName" /> user profile plus up to 9 custom user types.</p>
        <p>When you create a custom user type, Universal Directory makes what is in essence a copy of the latest default <MadCap:variable name="okta-variables.ProductName" /> user profile with the default 31 base <MadCap:variable name="okta-variables.ProductName" /> attributes. The copy is created with the new user type name you give it (for example, Contractor). Once this copy is made, you can then add custom attributes that are relevant to the Contractor user type.</p>
        <p>
You can customize the 31 base <MadCap:variable name="okta-variables.ProductName" /> user attributes. Each custom user type can have different attribute settings. You can make some attributes optional or required, select different enum types, and so on. Each user type can map the <MadCap:variable name="okta-variables.ProductName" /> user profile attributes to different application attributes and add custom attributes. This gives you complete flexibility in your authentication and provisioning scenarios.</p>
        <p>With user types, you can:</p>
        <ul>
            <li>Have up to 10 distinct user types within a single <MadCap:variable name="okta-variables.ProductName" /> org.</li>
            <li>Apply different constraints on attributes. For example, for <span style="font-style: normal; font-weight: bold;" class="uicontrol">email</span>, you can specify a specific email domain as the format for one user type and another domain for a different user type.</li>
            <li>Have different profile mappings for the same app for different user types.</li>
        </ul>
        <p>Each <MadCap:variable name="okta-variables.ProductName" /> user can only have one user type, which is selected when that user is created. That is, Jane Doe can only have one <MadCap:variable name="okta-variables.ProductName" /> user type: either the default <MadCap:variable name="okta-variables.ProductName" /> user type or a custom user type.</p>
        <h2>Use case</h2>
        <p>If Jane requires two user types, two distinct user profiles must be created. What does this mean?</p>
        <p>Let's look at a scenario where Jane Doe is a teacher at a local college. As a teacher, she requires access to certain applications for creating class materials, providing student grades and dealing with internal employee applications for benefits, payroll and so on. Jane Doe would be created as the custom user type Teacher.</p>
        <p>If Jane Doe wants to take advantage of the free tuition offered to employees and she enrolls in a class, she would no longer be signing in as a teacher at the college. She would need a student profile, so she can access student-related applications for viewing class material, interacting with her classmates online, and viewing her grades. Jane Doe cannot re-use her existing <MadCap:variable name="okta-variables.ProductName" /> user ID. A new user profile must be created for her with the custom user type of <span class="uicontrol">Student</span>. This would require her to have a second user profile with the "student" attributes.</p>
        <p>To work with custom user types, see <MadCap:xref href="usgp-user-types-known issues.htm">Universal Directory custom user types known issues</MadCap:xref>.</p>
    </body>
</html>