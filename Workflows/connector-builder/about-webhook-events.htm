<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head><title>[%=Heading.Level1%] | Okta</title>
    </head>
    <body>
        <h1>Webhook event cards</h1>
        <MadCap:snippetBlock src="../../../Resources/Snippets/workflows/webhook-intro-1.flsnp" />
        <p>Here's how webhooks generally work:</p>
        <ul>
            <li>
                <p>Set up the webhook: The receiving application (the webhook consumer) sets up a webhook with an endpoint URL that listens for incoming webhook payloads from the sending application (the webhook provider). </p>
                <p>As an <MadCap:variable name="okta-variables.ProductName" /> administrator, you might set up a webhook to receive notifications when events happen in the <MadCap:variable name="okta-variables.ProductName" /> platform. This event could be, for example, a new user creation, an authentication event, or a password reset. </p>
                <p>Alternatively, you can configure your webhook  to work with a third-party application to notify you of external changes, so you can update details within your <MadCap:variable name="okta-variables.ProductName" /> org.</p>
            </li>
            <li>
                <MadCap:snippetBlock src="../../../Resources/Snippets/workflows/webhook-regdereg-intro.flsnp" />
                <p>Webhook registration: To establish a webhook, you need to register an endpoint URL with the provider. This location is where your receiving application listens for incoming data.</p>
                <p>Here's how the webhook registration process typically works:</p>
                <ul>
                    <li>
                        <p>Endpoint URL registration: The receiving application (the webhook consumer) provides an endpoint URL. This is the URL that listens for incoming webhook payloads from the sending application (webhook provider).</p>
                    </li>
                    <li>
                        <p>Subscribe to events: The webhook provider, which could be an external application or a service like <MadCap:variable name="okta-variables.ProductName" />, allows you to subscribe to specific events. For example, user creation or deactivation, a sign in attempt, or other types of events relevant to the provider's functionality.</p>
                    </li>
                    <li>
                        <p>Payload configuration: During webhook registration, you can configure the payload format and content. This includes specifying what data the webhook provider needs to include in the payload when an event occurs.</p>
                    </li>
                    <li>
                        <p>Confirmation or verification: Some webhook systems require a verification step to ensure that the provided endpoint URL is valid and under your control. This may involve the webhook provider sending a verification token to your endpoint that requires a response to complete validation.</p>
                    </li>
                    <li>
                        <p>Activation: After successful registration, the active webhook is ready to receive event notifications. When specified events occur, the provider sends payloads containing relevant data to your registered endpoint URL.</p>
                    </li>
                </ul>
            </li>
            <li>
                <p>An event trigger: When a specific event occurs on the provider platform, the provider generates a payload containing relevant information about the event.</p>
            </li>
            <li>
                <p>Payload delivery: The webhook provider then sends an HTTP POST request  containing the payload with event details to the URL that you registered. The data is typically sent in JSON format.</p>
            </li>
            <li>
                <p>Handling the payload: The receiving application's server processes the incoming POST request. It parses the JSON payload and performs actions based on the event data. This could involve updating a database, sending notifications, or triggering some other business logic.</p>
                <p>When handling payloads, there are two aspects of webhooks to keep in mind:</p>
                <ul>
                    <li>
                        <p>Request aggregation:&#160;Incoming payloads can be received as individual items, or as a collected batch of items.</p>
                    </li>
                    <li>
                        <p>Process batched requests:&#160;For incoming payloads arriving as a collected batch, the webhook event flow can process each item individually or handle the entire batch as a single item.</p>
                    </li>
                </ul>
            </li>
            <li>
                <p>Response and acknowledgment: After the receiving application has processed the payload, it sends an HTTP response back to the provider. This response indicates whether the receiver successfully received and processed the payload.</p>
            </li>
            <li>
                <p>Retry mechanism: Sometimes, due to network issues or other reasons, the webhook delivery might fail. To ensure reliability, many webhook systems implement a retry mechanism. If the initial delivery attempt fails, the system makes extra attempts to deliver the payload.</p>
            </li>
            <li>
                <p>Webhook deregistration: If you no longer need to receive certain event notifications, or if you're switching to a different endpoint, or  decommissioning the webhook altogether, you need to deregister the previously established webhook connection.</p>
                <p>Here's how the webhook deregistration process typically works:</p>
                <ul>
                    <li>
                        <p>Endpoint URL removal: To deregister a webhook, you typically inform the webhook provider to stop sending payloads to a specific endpoint URL.</p>
                    </li>
                    <li>
                        <p>Unsubscribe from events: Similar to registration, you might need to specify which events you want to unsubscribe from. This ensures that you no longer receive event notifications for those events.</p>
                    </li>
                    <li>
                        <p>Deactivation: Once you've successfully deregistered from the events at the provider, you deactivate the webhook for your endpoint URL. You'll no longer receive event payloads.</p>
                    </li>
                </ul>
            </li>
        </ul>
        <p>Webhooks involve exchanging data over the internet, so security is crucial. Implementing proper authentication and authorization mechanisms, such as  API keys or tokens, helps ensure that only authorized parties can send or receive webhook data.</p>
        <p>Overall, webhooks provide a way for different systems to stay connected and respond to events in near-real time, enabling efficient automation and integration between applications.</p>
        <h2>Related topics</h2>
        <p>
            <MadCap:xref href="webhook-event.htm">Build a webhook event flow</MadCap:xref>
        </p>
        <p>
            <MadCap:xref href="webhook-event-register.htm">Register a webhook event</MadCap:xref>
        </p>
        <p>
            <MadCap:xref href="webhook-event-deregister.htm">Deregister a webhook event</MadCap:xref>
        </p>
    </body>
</html>