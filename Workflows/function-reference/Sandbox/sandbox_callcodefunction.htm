<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes" MadCap:conditions="Primary.do-not-publish">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Sandbox/sandbox_callcodefunction.htm" /><title>[%=Heading.Level1%] | Okta</title>
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Code Functions Call Code Function</h1>
            <p>Note: Check the Settings -&gt; Subscription page to see whether or not your plan includes the use of Code Functions, and if so, what limits are in place.</p>
            <p>The Code Functions&#160;feature allows you to upload and optionally share JavaScript functions that can be called from flows. (Additional languages may be supported in the future.)</p>
            <h3>"Call Code Function"&#160;card</h3>
            <p>You can find the "Call Code Function" card&#160;in the "Code" category when you click "Add Function" while working on a flow. On step 1&#160;"Options" are two dropdowns:</p>
            <ul>
                <li>
                    <p><span class="uicontrol">code</span>: &#160;Click and select the code module you want to call. (If you haven't yet uploaded your code, read the "Uploading, Managing and Sharing JavaScript Code Functions" section below.)</p>
                </li>
                <li>
                    <p><span class="uicontrol">function</span>: &#160;After you've chosen the code, you can choose from the list of functions that are included in that code, and then click "Next" to advance to the next tab.</p>
                </li>
            </ul>
            <p>On step 2 "Data" there are two sections for Inputs and Outputs. If the code declared "@param" and "@return" in the proper format in the comments (see details below), the names and types of the inputs and outputs for the function are provided. Otherwise, you have to create new fields that match the exact name and type that the function expects.</p>
            <h3>Uploading, Managing and Sharing JavaScript Code Functions</h3>
            <p>To access the Code Functions panel:</p>
            <ol>
                <li>
                    <p>Click&#160;Settings from the top navigation</p>
                </li>
                <li>
                    <p>Click "Code Functions"</p>
                </li>
            </ol>
            <p>You'll see an "+Upload Code" button and the list of existing uploaded code that you have access to.</p>
            <p>To <span class="userinput">Upload</span>&#160;new functions that can be called from&#160;flows, click "+Upload Code" to bring up the "Upload Code" dialog. Provide a Name (required) and Description (optional).</p>
            <p>For simple projects with no dependencies, click <span class="userinput">Write Code</span> to bring up a basic code window where you can paste in or compose&#160;a basic function set.&#160;The format (see example below) requires module.exports to reference an object that contains keys as function names and values as functions. All entry functions should conform to the same signature: (req, res)&#160;where&#160;req is the&#160;incoming message and res is the server response.</p>
            <p>For more complex projects, where dependencies, or multiple files are required, code can be uploaded using Upload Code and providing a zip or tar.gz file. The format requires an index.js file at the root of the extracted archive with the same module.exports format as above. If a package.json is included, the dependencies listed will be installed. Other modules can be included and used within index.js.</p>
            <p>Here is an example of a single&#160;function:</p><span class="codeph">module.exports= {/** * @nameAverage * @param{number} Total * @param{number} Count * @return {number} Result */ Average(req, res) {var inputs = req.body.data;if (inputs.Count==0) {     res.status(500).send("Div by 0");   }else {var output = inputs.Total/ inputs.Count;     res.status(200).send({"Result": output});   } }}</span>
            <p>The optional comment block shown&#160;uses JSDoc format (one block per function) to specify the names and types of the input and output fields to automatically show up in the "Call Code Function" card; if not provided, users will have to&#160;manually provide the name and type of&#160;each input and output when they call the function. Types&#160;can be number, string, object, boolean, date or a list of any of those by adding square brackets after the type, e.g. "{number[]}" for a list of numbers.</p>
            <p>Once you've uploaded code, additional options are available by clicking the icons at the right side in the code list:</p>
            <ul>
                <li>
                    <p><span class="uicontrol">Edit</span>: &#160;Click the Pencil icon to edit code you've already uploaded</p>
                </li>
                <li>
                    <p><span class="uicontrol">Manage Permissions</span>: &#160;Click the Person icon to share your code with other users. The&#160;sharing options are exactly the same as [sharing application accounts]({{&lt; relref "/sharing-flos/2338" &gt;}}), i.e.&#160;If you share a flow that calls&#160;your code, other users will be able to run that flow but will otherwise have no access to your code unless you grant them "Can Use" or "Can Edit" permission.</p>
                </li>
                <li>
                    <p><span class="uicontrol">Status</span>: A green check or red alert tells you whether the code successfully&#160;uploaded and is ready to run. You may see a spinner when you first upload or save edits. Click the red alert icon to get error details.</p>
                </li>
                <li>
                    <p><span class="uicontrol">Delete</span>: Click the Trash Can icon to remove code you've uploaded.</p>
                </li>
            </ul>
            <p>Here's another code sample:</p><span class="codeph">module.exports= {/**  * @nameMyFunction  * @param{number} x  * @param{number} y  *  * @return {number} sum  * @return {string} concat  * @return {object} construct  * @return {boolean} xIsMax  */MyFunction:function(req, res){var data = req.body.data;   res.status(200).json({sum: data.x+ data.y,concat: [data.x, data.y].join(""),construct: {x: data.x,y: data.y     },xIsMax: data.x&gt;= data.y     });   }};</span>
        </div>
    </body>
</html>