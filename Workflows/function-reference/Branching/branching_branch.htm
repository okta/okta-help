<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link href="../../../../Resources/TableStyles/standard-horizonal-borders-only.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Branching/branching_branch.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="Branching" />
        <meta name="coveo:method" content="branch" />
        <meta name="coveo:method-description" content="Specify different actions to run based on multiple if and else if conditions (similar to Switch or Case in some programming languages)." />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>If/ElseIf</h1>
            <p>Specify different actions to run based on multiple <span class="code">if</span> and <span class="code">else if</span> conditions (similar to <span class="code">Switch</span> or <span class="code">Case</span> in some programming languages). To specify different actions based on a single condition, you can use <MadCap:xref href="branching_if.htm">If/Else</MadCap:xref> instead.</p>
            <p>This function card allows you to set the sections:</p>
            <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col class="TableStyle-standard-horizonal-borders-only-Column-Column1" style="width: 127px;" />
                <col class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">
                            <p>Section</p>
                        </th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">
                            <p>Definition</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Conditions</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">List of conditions (true/false statements) that determine which branch to run.</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Branches</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Actions and functions to execute based on which condition is first met; if the condition is not met, the Else branch runs.</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Outputs (optional)</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">Output fields that can be used in subsequent steps of the flow. The value assigned to each output depends on which branch was run.</td>
                    </tr>
                </tbody>
            </table>
            <h2 class="relnotes">Conditions</h2>
            <p>When you create a new If/ElseIf, the first step is to define your Conditions. Conditions are true/false expressions, such as Sales &gt; 1000. As with similar cards like <MadCap:xref href="branching_if.htm">If/Else</MadCap:xref> and <MadCap:xref href="branching_continueif.htm">Continue If</MadCap:xref>, conditions are expressed using three inputs each: <span class="uicontrol">value a</span>, <span class="uicontrol">comparison</span>, and <span class="uicontrol">value b</span>. The values can be mapped fields (for example, an output from an action card) or constants that you enter. See below for a chart the different comparison choices.</p>
            <p>When your flow runs, the conditions are tested starting at the top and the corresponding Branch (a set of actions and functions that you provide) will run for the first (and only the first) condition that is true. If none are true, then the Else branch is run.</p>
            <p>When you're ready to define the actions for when a condition is met, click the <span class="uicontrol">+</span> icon to the right of that condition. Alternatively, you can navigate to different branches using the dropdown at the top left. Choose the condition that corresponds to the branch or click <span class="uicontrol">Edit Conditions</span> to edit or add new conditions.</p>
            <div class="note_cautionOkta">
                <p class="noteContent">Be sure to set the type of <span class="uicontrol">value a</span> and <span class="uicontrol">value b</span> to reflect how you would like the comparison to be done. For example, the operator <span class="uicontrol">greater than</span> compares numbers based on numeric value but text based on alphabetical sort order. So the number comparison <code>80 &gt; 9</code> is true, but the text comparison <code>"80" &gt; "9"</code> is false.</p>
            </div>
            <h2>Table of Relational Operators</h2>
            <table style="width: 100%;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col class="TableStyle-standard-horizonal-borders-only-Column-Column1" style="width: 127px;" />
                <col class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">
                            <p>Operator</p>
                        </th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">
                            <p>Use Case</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"> equal to</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Compare two texts, numbers, dates or true/false to see if they have the same value.</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
 not equal to
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts, numbers, dates or true/false to see if they have different&#160;values.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
greater than or equal
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts, numbers or dates to see if the&#160;first has the same or greater value than the second.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
 less than or equal
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts, numbers&#160;or&#160;dates to see if the&#160;first has the same or lesser&#160;value than the second.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
greater than
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts, numbers&#160;or&#160;dates to see if the&#160;first has a&#160;greater value than the second.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
less&#160;than
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts, numbers&#160;or&#160;dates to see if the&#160;first has a lesser&#160;value than the second.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
 a multiple of
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two&#160;numbers to see if value a is an exact multiple of value b. For example, 12, 0 and -4 are all multiples of 4, but 2, 3 and 7 are not.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
in
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Compare two texts to see if value a is a part of value b. For example, "test" is in "this is a test", but there is no "i" in "team".
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
not in
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
 Compare two texts to see if value a is not part of value b. 
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
has key
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
When value a is&#160;an object and value b is text, tests to see if the object has&#160;a key with the specified name. For example, true if value a is {"test":123} and value b is "test".
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
doesn't have key
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
When value a is&#160;an object and value b is text, tests to see if the object does not have&#160;a key with the specified name.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
is empty
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Checks to see if value a is&#160;empty; ignores value b. What defines "empty" varies by type. Note: Only works for Text and Object. Numbers, Dates, T/F, are viewed as empty.
                                </td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">
is not empty
                                </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">
Checks to see if value a is&#160;not empty. Note: Only works for Text and Object.&#160;Numbers, Dates, T/F, are viewed as empty.
                                </td>
                    </tr>
                </tbody>
            </table>
            <h2>Branches</h2>
            <p>Each branch contains the actions and functions you wish to execute when its corresponding condition is true. Add cards to this container just as you would in a flow.</p>
            <p>Use the dropdown at the top left of the When container to navigate to a different branch or to edit or add new conditions.</p>
            <div class="noteOkta">
                <img src="../../../../Resources/Images/assets/Icons/Notes/Help.png" class="noteImgFloat" title="Note" alt="Note" />
                <p class="noteContent">Return and Continue-If behave differently when inside an If/ElseIf branch as opposed to inside an If/Else branch. Think of If/ElseIf branches as anonymous helper flows -- and just as with a helper flow, a Return returns you to the parent rather than halting. A Return or Continue-If (when false) proceeds to the step immediately after the If/ElseIf.</p>
            </div>
            <h2>Output (Optional)</h2>
            <p>You can drag outputs from cards that run before the If/ElseIf into a condition or branch inside the If/ElseIf, but you cannot drag outputs from inside a branch to cards that are run after the If/ElseIf. This is because an output from inside a branch will be undefined any time a different branch is run. The way to get around this is to use the optional Outputs feature.</p>
            <p>You access the Outputs by clicking <span class="uicontrol">View Outputs</span>, which can be found on the top-right of the If/ElseIf container. This opens up a pane that appears to the right of all branches. Click to add a new output -- you can type the name and choose the type. Beneath each output you define will be one input for each <span class="code">If</span> or <span class="code">Else If</span> condition you've defined for your If/ElseIf plus one for the <span class="code">Else</span> condition. You specify a different value to use for each output by dropping in an output from the corresponding branch.</p>
            <p>The output fields in this pane can be mapped to subsequent steps in the flow.</p>
            <MadCap:snippetBlock src="../functions-see-also.flsnp" />
        </div>
    </body>
</html>