<?xml version="1.0" encoding="utf-8"?>
<html MadCap:onlyLocalStylesheets="False" MadCap:searchable="True" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/functions.htm" />
        <link href="../../../Resources/TableStyles/standard.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>Functions in Workflows</title>
        <link href="" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1 MadCap:conditions="MultiProdPublish.Workflows"><a name="top"></a>Functions in Workflows</h1>
            <div>
                <p>You can use functions to interact with, change, and control your data in <MadCap:variable name="okta-feature-names.Okta Workflows" />.</p>
                <table style="mc-table-style: url('../../../Resources/TableStyles/standard.css');border-left-style: solid;border-left-width: 0px;border-left-color: #c0c0c0;border-right-style: solid;border-right-width: 0px;border-right-color: #c0c0c0;border-top-style: solid;border-top-width: 0px;border-top-color: #c0c0c0;border-bottom-style: solid;border-bottom-width: 0px;border-bottom-color: #c0c0c0;margin-left: 0;margin-right: auto;" class="TableStyle-standard" cellspacing="0">
                    <col style="width: 30%;" class="TableStyle-standard-Column-Column1" />
                    <col style="width: 30%;" class="TableStyle-standard-Column-Column1" />
                    <tbody>
                        <tr class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyC-Column1-Body1" style="text-align: left;border-left-style: solid;border-left-width: 0px;border-top-style: solid;border-top-width: 0px;border-right-style: solid;border-right-width: 0px;border-bottom-style: solid;border-bottom-width: 0px;padding-left: 7px;padding-right: 7px;padding-top: 7px;padding-bottom: 7px;">
                                <ul>
                                    <li>
                                        <MadCap:xref href="#http">API Connector</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#branching">Branching</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#Control">Control</MadCap:xref>
                                    </li>
                                    <li MadCap:conditions="Primary.review-only">
                                        <MadCap:xref href="#CSV">CSV</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#datetime">Date &amp; Time</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#encryption">Encryption</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#errorhandling">Error Handling</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#filefunctions">File</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#flocontrol">Flow Control</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#Flows">Flows</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#Folders">Folders</MadCap:xref>
                                    </li>
                                </ul>
                            </td>
                            <td class="TableStyle-standard-BodyA-Column1-Body1" style="text-align: left;border-left-style: solid;border-left-width: 0px;border-top-style: solid;border-top-width: 0px;border-right-style: solid;border-right-width: 0px;border-bottom-style: solid;border-bottom-width: 0px;padding-left: 7px;padding-right: 7px;padding-top: 7px;padding-bottom: 7px;">
                                <ul>
                                    <li>
                                        <MadCap:xref href="#json">JSON</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#jwt">JWT</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#list">List</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#number">Number</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#object">Object</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#stash">Tables</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#text">Text</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#truefalse">True/False</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#url">URL</MadCap:xref>
                                    </li>
                                    <li>
                                        <MadCap:xref href="#xml">XML</MadCap:xref>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div>
                <div>
                    <div>
                        <h2><a name="http"></a>API Connector</h2>
                        <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                            <col style="width: 20%;" class="TableStyle-standard-Column-Column1" />
                            <col class="TableStyle-standard-Column-Column1" />
                            <thead>
                                <tr class="TableStyle-standard-Head-Header1">
                                    <th class="TableStyle-standard-HeadF-Column1-Header1">
                                        <p>Function</p>
                                    </th>
                                    <th class="TableStyle-standard-HeadD-Column1-Header1">
                                        <p>Description</p>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <MadCap:xref href="HTTP/http_authorization.htm">Authenticate with API Connector cards</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">
                                        Use API Connector (HTTP) function cards to make authenticated basic, OAuth 2, or custom connections to third-party services.
                                    </td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyF-Column1-Body2">
                                        <MadCap:xref href="HTTP/http_errors.htm">HTTP - Errors</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body2">An error in an HTTP function typically corresponds to a&#160;standard HTTP error code returned by the API that you called. For instance, if the api returns the status code 400, you get a "Bad Request" error. If the status code is 401, the error is "Unauthorized." For a full list of possible status codes, see <MadCap:xref href="../execute/http-status-codes.htm">HTTP status codes</MadCap:xref>.</td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <MadCap:xref href="HTTP/http_accept.htm">API Endpoint</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">
Invoke a flow by specifying a URL.
                                        </td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyF-Column1-Body2">
                                        <MadCap:xref href="HTTP/http_close.htm">Close</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body2">
                                        For use with API Endpoint flows only. See <MadCap:xref href="HTTP/http_accept.htm">API Endpoint</MadCap:xref>.
                                        <p>This function sends a response back to the caller and closes the HTTP connection, similar to <MadCap:xref href="Flow-Control/flocontrol_return.htm">Return</MadCap:xref> or <MadCap:xref href="Flow-Control/flocontrol_returnraw.htm">Return Raw</MadCap:xref>, but also allows the flow to continue execution afterward. </p><p>This is useful for flows that might not complete before the connection times out, as the caller might call the endpoint again with the same inputs and cause duplicate executions.</p></td>
                                </tr>
                                <tr class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <MadCap:xref href="HTTP/http_delete.htm">Delete</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">Performs an HTTP DELETE request, returning the result of this request and the response headers. On input, takes a required URL input and optional header, body, and query inputs.</td>
                                </tr>
                                <tr class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyF-Column1-Body2">
                                        <MadCap:xref href="HTTP/http_get.htm">Get</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body2">Performs an HTTP GET request, returning the result of this request and the response headers. On input, takes a required URL input and optional auth, header, and query inputs. Each optional input can either be modeled by a single object-typed input, or by multiple keys with the appropriate group attribute. On output, returns an object with two keys, headers and output. The output key contains the response body, and the headers key contains the response header. More detailed information can be accessed about these by using multiple keys with the appropriate grouping.</td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <p>
                                            <MadCap:xref href="HTTP/http_paginate.htm">Paginate</MadCap:xref>
                                        </p>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">
                                        <p>Use a helper flow to paginate through multiple pages of an HTTP response.</p>
                                    </td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyF-Column1-Body2">
                                        <p>
                                            <MadCap:xref href="HTTP/http_paginate_set-max-page-index.htm">Paginate: Set a Max Page Index</MadCap:xref>
                                        </p>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body2">
                                        <p>Set how many times the Paginate function card iterates.</p>
                                    </td>
                                </tr>
                                <tr MadCap:conditions="" class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <p>
                                            <MadCap:xref href="HTTP/http_paginate_api-endpoint.htm">Paginate: API Endpoint</MadCap:xref>
                                        </p>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">
                                        <p>Use the Paginate function card against an API endpoint.</p>
                                    </td>
                                </tr>
                                <tr class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyF-Column1-Body2">
                                        <MadCap:xref href="HTTP/http_post.htm">Post</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body2">Performs an HTTP POST request, returning the result of this request and the response headers. On input, takes a required URL input and optional auth, header, body, and query inputs. Each optional input can either be modeled by a single object-typed input, or by multiple keys with the appropriate group attribute. On output, returns an object with two keys, headers and output. The output key contains the response body, and the headers key contains the response header. More detailed information can be accessed about these by using multiple keys with the appropriate grouping.</td>
                                </tr>
                                <tr class="TableStyle-standard-Body-Body1">
                                    <td class="TableStyle-standard-BodyF-Column1-Body1">
                                        <MadCap:xref href="HTTP/http_put.htm">Put</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyD-Column1-Body1">Performs an HTTP PUT request, returning the result of this request and the response headers. On input, takes a required URL input and optional auth, header, body, and query inputs. Each optional input can either be modeled by a single object-typed input, or by multiple keys with the appropriate group attribute. On output, returns an object with two keys, headers and output. The output key contains the response body, and the headers key contains the response header. More detailed information can be accessed about these by using multiple keys with the appropriate grouping.</td>
                                </tr>
                                <tr class="TableStyle-standard-Body-Body2">
                                    <td class="TableStyle-standard-BodyC-Column1-Body2">
                                        <MadCap:xref href="HTTP/http_raw.htm">Raw Request</MadCap:xref>
                                    </td>
                                    <td class="TableStyle-standard-BodyA-Column1-Body2">
                                        <p>Advanced. This method performs a raw HTTP request, allowing the flow builder to control all aspects of the HTTP request. This allows a flow to call an XML service for example, or call an HTML service, or various other advanced use cases. While the other HTTP functions are optimized for ease-of-use with typical JSON-based services, the Raw Request function is more flexible, at the cost of being a bit harder to use.</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <h2><a name="branching"></a>Branching</h2>
                    <table style="mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                        <col style="width: 20%;" class="TableStyle-standard-Column-Column1" />
                        <col style="width: 80%;" class="TableStyle-standard-Column-Column1" />
                        <thead>
                            <tr class="TableStyle-standard-Head-Header1">
                                <th class="TableStyle-standard-HeadF-Column1-Header1">
                                    <p>Function</p>
                                </th>
                                <th class="TableStyle-standard-HeadD-Column1-Header1">
                                    <p>Description</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="Branching/branching_assignif.htm">Assign If</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">Assign a value based on the true or false result of a conditional statement. If there are more than two potential output values, see <MadCap:xref href="Branching/branching_lookup.htm">Lookup</MadCap:xref>.</td>
                            </tr>
                            <tr MadCap:conditions="MultiProdPublish.Workflows" class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="Branching/branching_continueif.htm">Continue If</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
Continue or halt the flow based on the result of a true or false conditional test. Use <MadCap:xref href="Error-Handling/errorhandling_throwif.htm">Return Error If</MadCap:xref> instead if you want to halt the flow with an error when the condition is true.
                                    </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="Branching/branching_if.htm">If/Else</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
Use an If/Else conditional statement to determine the steps that the flow should follow.<![CDATA[   ]]></td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="Branching/branching_branch.htm">If/ElseIf</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">Specify different actions to run based on multiple <cite>if</cite> and <cite>else if</cite> conditions (similar to <cite>Switch</cite> or <cite>Case</cite> in some programming languages). To specify different actions based on a single condition, you can use <MadCap:xref href="Branching/branching_if.htm">If/Else</MadCap:xref> instead.</td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyC-Column1-Body1">
                                    <MadCap:xref href="Branching/branching_lookup.htm">Lookup</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyA-Column1-Body1">Convert one value to another using a lookup table. For example, change one web service code to another web service code, or a department name to a contact email.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <h2><a name="Control"></a>Control</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                    <col style="width: 20%;" MadCap:conditions="" class="TableStyle-standard-Column-Column1" />
                    <col style="width: 80%;" MadCap:conditions="" class="TableStyle-standard-Column-Column1" />
                    <thead>
                        <tr class="TableStyle-standard-Head-Header1">
                            <th class="TableStyle-standard-HeadF-Column1-Header1">
                                <p>Function</p>
                            </th>
                            <th class="TableStyle-standard-HeadD-Column1-Header1">
                                <p>Description</p>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyF-Column1-Body1">
                                <MadCap:xref href="Control/control_tonumber.htm">To Number</MadCap:xref>
                            </td>
                            <td class="TableStyle-standard-BodyD-Column1-Body1">Convert a string to a numerical value.</td>
                        </tr>
                        <tr class="TableStyle-standard-Body-Body2">
                            <td class="TableStyle-standard-BodyF-Column1-Body2">
                                <MadCap:xref href="Control/control_tostring.htm">To String</MadCap:xref>
                            </td>
                            <td class="TableStyle-standard-BodyD-Column1-Body2">
Convert a numerical value to a string.
                                </td>
                        </tr>
                        <tr MadCap:conditions="Primary.do-not-publish" class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyC-Column1-Body1">
                                <MadCap:xref href="Control/control_typeof.htm">Type Of</MadCap:xref>
                            </td>
                            <td class="TableStyle-standard-BodyA-Column1-Body1">
Determine a type for an input value.
                                </td>
                        </tr>
                    </tbody>
                </table>
                <h2 MadCap:conditions="Primary.review-only"><a name="CSV"></a>CSV</h2>
                <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0" MadCap:conditions="Primary.review-only">
                    <col class="TableStyle-standard-Column-Column1" style="width: 20%;" />
                    <col class="TableStyle-standard-Column-Column1" style="width: 80%;" />
                    <thead>
                        <tr class="TableStyle-standard-Head-Header1">
                            <th class="TableStyle-standard-HeadF-Column1-Header1">
                                <p>Function</p>
                            </th>
                            <th class="TableStyle-standard-HeadD-Column1-Header1">
                                <p>Description</p>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-standard-Body-Body1">
                            <td class="TableStyle-standard-BodyF-Column1-Body1">
                                <MadCap:xref href="CSV/csv_decode.htm">Decode</MadCap:xref>
                            </td>
                            <td class="TableStyle-standard-BodyD-Column1-Body1">
Decodes a CSV string into a list of objects.
                                </td>
                        </tr>
                        <tr class="TableStyle-standard-Body-Body2">
                            <td class="TableStyle-standard-BodyC-Column1-Body2">
                                <MadCap:xref href="CSV/csv_encode.htm">Encode</MadCap:xref>
                            </td>
                            <td class="TableStyle-standard-BodyA-Column1-Body2">
Encodes a list of objects into a CSV string.
                                </td>
                        </tr>
                    </tbody>
                </table>
                <div>
                    <h2><a name="datetime"></a>Date &amp; Time</h2>
                    <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                        <col class="TableStyle-standard-Column-Column1" style="width: 20%;" />
                        <col class="TableStyle-standard-Column-Column1" />
                        <thead>
                            <tr class="TableStyle-standard-Head-Header1">
                                <th class="TableStyle-standard-HeadF-Column1-Header1">
                                    <p>Function</p>
                                </th>
                                <th class="TableStyle-standard-HeadD-Column1-Header1">
                                    <p>Description</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="DateTime/datetime_add.htm">Add</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Add a multiple of a unit of time (for example, seconds) from a starting date and time and return a new date value.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="DateTime/datetime_fromiso.htm">Convert</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
                                    <p>Convert a date and time to various formats. </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="DateTime/datetime_format.htm">Date to Text</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Convert a date and time into a provided format in a specified timezone. </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="DateTime/datetime_diff.htm">Difference</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">Calculate the difference in time between two dates.</td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="DateTime/datetime_epoch.htm">Epoch</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Convert a date and time to the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT) not counting leap seconds.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="DateTime/datetime_iso.htm">ISO</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
                                    <p>Calculate the corresponding ISO8601 string using UTC <span class="code">Z</span> notation for a given date and time (not adjusted for local time zone). </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="DateTime/datetime_now.htm">Now</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Calculate the current date and time in various formats, all in UTC time (not adjusted for local timezone).</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="DateTime/datetime_subtract.htm">Subtract</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
                                    <p>Subtract a multiple of a unit of time (for example, seconds) from a starting date and time and return a new date value. </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="DateTime/datetime_parse.htm">Text to Date</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Create a date and time from the contents of a text string, according to a specified format.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyC-Column1-Body2">
                                    <MadCap:xref href="DateTime/datetime_unix.htm">UNIX</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyA-Column1-Body2">
                                    <p>Convert a date and time to the UNIX standard format.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <h2><a name="encryption"></a>Encryption</h2>
            <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                <col class="TableStyle-standard-Column-Column1" style="width: 20%;" />
                <col class="TableStyle-standard-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-Head-Header1">
                        <th class="TableStyle-standard-HeadF-Column1-Header1">
                            <p>Function</p>
                        </th>
                        <th class="TableStyle-standard-HeadD-Column1-Header1">
                            <p>Description</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <MadCap:xref href="Encryption/encryption_aes.htm">AES</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">AES encrypts input text and returns the encrypted text. Accepts any AES-based algorithm specified by OpenSSL.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">
                            <p>
                                <MadCap:xref href="Encryption/encryption_decipher.htm">Decrypt</MadCap:xref>
                            </p>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">
                            <p>Decrypt text from a base64 encoding using a key and specified OpenSSL algorithm.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <MadCap:xref href="Encryption/encryption_cipher.htm">Encrypt</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">Encrypt text into a base64 encoding using a key and specified OpenSSL algorithm.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">
                            <MadCap:xref href="Encryption/encryption_hash.htm">Hash</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">Hashes input text and digests the return string on output with hex, binary, or base64 encoding. Accepts any hash function specified by OpenSSL.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <MadCap:xref href="Encryption/encryption_hmac.htm">HMAC</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">HMAC hashes input text and returns the resulting hashed text, accepting any HMAC algorithm specified by OpenSSL</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2" MadCap:conditions="">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">
                            <p>
                                <MadCap:xref href="Encryption/encryption_md5.htm">MD5</MadCap:xref>
                            </p>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">
                            <p>Hashes input text using the MD5 hash function, returning the resulting hashed text.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <MadCap:xref href="Encryption/encryption_sha1.htm">SHA1</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">Hashes input text using the SHA-1 hash function, returning the resulting hashed text.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">
                            <MadCap:xref href="Encryption/encryption_sha256.htm">SHA256</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">Hashes input text using the SHA-256 hash function, returning the resulting hashed text.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyC-Column1-Body1">
                            <p>
                                <MadCap:xref href="Encryption/encryption_sign.htm">Sign</MadCap:xref>
                            </p>
                        </td>
                        <td class="TableStyle-standard-BodyA-Column1-Body1">
                            <p>Sign hashes input text with an input algorithm and private key, and digests the return string on output with hex, binary, or base64 encoding.</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <h2><a name="errorhandling"></a>Error Handling</h2>
            <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                <col style="width: 20%;" class="TableStyle-standard-Column-Column1" />
                <col class="TableStyle-standard-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-Head-Header1">
                        <th class="TableStyle-standard-HeadF-Column1-Header1">
                            <p>Function</p>
                        </th>
                        <th class="TableStyle-standard-HeadD-Column1-Header1">
                            <p>Description</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyF-Column1-Body1">
                            <p>
                                <MadCap:xref href="Error-Handling/errorhandling_trycatch.htm">If Error</MadCap:xref>
                            </p>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body1">
                            <p>Specify alternate actions to handle an error without stopping your flow.</p>
                        </td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body2">
                        <td class="TableStyle-standard-BodyF-Column1-Body2">
                            <MadCap:xref href="Error-Handling/errorhandling_throw.htm">Return Error</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyD-Column1-Body2">Return an error and end the flow.</td>
                    </tr>
                    <tr class="TableStyle-standard-Body-Body1">
                        <td class="TableStyle-standard-BodyC-Column1-Body1">
                            <MadCap:xref href="Error-Handling/errorhandling_throwif.htm">Return Error If</MadCap:xref>
                        </td>
                        <td class="TableStyle-standard-BodyA-Column1-Body1">Return an error and halt the flow if a&#160;conditional test is true. If you want to conditionally stop a flow but under normal circumstances so it doesn't appear as an error, use <MadCap:xref href="Branching/branching_continueif.htm">Continue If</MadCap:xref> instead.</td>
                    </tr>
                </tbody>
            </table>
            <div>
                <div>
                    <h2><a name="filefunctions"></a>File</h2>
                    <table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0">
                        <col class="TableStyle-standard-Column-Column1" style="width: 20%;" />
                        <col class="TableStyle-standard-Column-Column1" />
                        <thead>
                            <tr class="TableStyle-standard-Head-Header1">
                                <th class="TableStyle-standard-HeadF-Column1-Header1">
                                    <p>Function</p>
                                </th>
                                <th class="TableStyle-standard-HeadD-Column1-Header1">
                                    <p>Description</p>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="File/filefunctions_largedownload.htm">Download</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Download a file to the Workflows file system over HTTP or HTTPS. </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <p>
                                        <MadCap:xref href="File/filefunctions_largedownload_use_card.htm">Use the Download function card in a flow</MadCap:xref>
                                    </p>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
                                    <p>Use the Download function card to download any file, such as an image or document file, that you can access through a URL in your browser.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="File/filefunctions_info.htm">Info</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Retrieve information about a file. To use the Info function card, set the input to the File Contents&#160;of a file  downloaded previously in the flow. The output provides basic information about the file.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyF-Column1-Body2">
                                    <MadCap:xref href="File/filefunctions_largemultipartupload.htm">Multipart Upload</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body2">
                                    <p>Upload a file from the Workflows file system to a web service, using&#160;HTTP or HTTPS, and using multipart form-data. </p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body1">
                                <td class="TableStyle-standard-BodyF-Column1-Body1">
                                    <MadCap:xref href="File/filefunctions_largeupload.htm">Upload</MadCap:xref>
                                </td>
                                <td class="TableStyle-standard-BodyD-Column1-Body1">
                                    <p>Upload a file from the Workflows file system to a web service, using&#160;HTTP or HTTPS.</p>
                                </td>
                            </tr>
                            <tr class="TableStyle-standard-Body-Body2">
                                <td class="TableStyle-standard-BodyC-Column1-Body2">
                                    <p>
                                        <MadCap:xref href="File/filefunctions_upload_use_card.htm">Use the Upload function card in a flow</MadCap:xref>
                                    </p>
                                </td>
                                <td class="TableStyle-standard-BodyA-Column1-Body2">
                                    <p>Use the Upload function card to upload any file, such as an image or document file, from the Workflows file system.</p>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div> <div><h2><a name="flocontrol"></a>Flow Control</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Flow-Control/flocontrol_let.htm">Assign</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Create output fields based on the input supplied.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Flow-Control/flocontrol_spawn.htm">Call Flow</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Run&#160;another flow within the context of your current flow. Your flow resumes when the other flow finishes. If you don't care about waiting for the other flow to finish, you can use <MadCap:xref href="Flow-Control/flocontrol_run.htm">Call Flow Async</MadCap:xref> instead.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Flow-Control/flocontrol_run.htm">Call Flow Async</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Start another flow then continue without waiting for that flow to finish. String together multiple Call Flow Async cards if you want to kick off different sets of actions to run at the same time (in parallel).</td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Flow-Control/flocontrol_pause.htm">Pause</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>The Pause function currently only works when used in flows that are resumed programmatically. If you want to pause a flow for a specific delay or until a specific time, use a <MadCap:xref href="Flow-Control/flocontrol_wait.htm">Wait For</MadCap:xref> or <MadCap:xref href="Flow-Control/flocontrol_until.htm">Wait Until</MadCap:xref> function.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Flow-Control/flocontrol_pauseraw.htm">Pause Raw</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Pause the running flow execution, returning raw HTTP data to the caller. Resume it by calling the resume API.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Flow-Control/flocontrol_times.htm">Repeat</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Runs&#160;a helper flow a specified number of times.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Flow-Control/flocontrol_return.htm">Return</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>End a flow and returns values to the caller of the flow.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Flow-Control/flocontrol_returnraw.htm">Return Raw</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Return the data to the caller, with full control over the HTTP Response.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Flow-Control/flocontrol_wait.htm">Wait For</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Pause the flow and wait for a specified amount of time before resuming the flow execution. </p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="Flow-Control/flocontrol_until.htm">Wait Until</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2">Pause the flow and wait until a specific date and time to continue executing the flow.</td></tr></tbody></table></div><h2 MadCap:conditions="MultiProdPublish.Workflows"><a name="Flows"></a>Flows</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" MadCap:conditions="MultiProdPublish.Workflows" /><col class="TableStyle-standard-Column-Column1" MadCap:conditions="MultiProdPublish.Workflows" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><p><MadCap:xref href="Flows/flows_exportflow.htm">Export Flow</MadCap:xref></p></td><td class="TableStyle-standard-BodyA-Column1-Body1"><p>Export all the elements of a single flow as a JSON file. </p></td></tr></tbody></table><h2 MadCap:conditions="MultiProdPublish.Workflows"><a name="Folders"></a>Folders</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" MadCap:conditions="MultiProdPublish.Workflows" /><col class="TableStyle-standard-Column-Column1" MadCap:conditions="MultiProdPublish.Workflows" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><p><MadCap:xref href="Folders/folders_exportfolder.htm">Export Folder</MadCap:xref></p></td><td class="TableStyle-standard-BodyA-Column1-Body1"><p>Export a folder containing one or more flows as a JSON file.</p></td></tr></tbody></table> <div><h2><a name="json"></a>JSON</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="JSON/json_parse.htm">Parse</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">This function parses a JSON string into&#160;a typed field - such as an object or a list - that you can use in subsequent functions. It's the inverse&#160;of the <MadCap:xref href="JSON/json_stringify.htm">Stringify</MadCap:xref> function.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="JSON/json_stringify.htm">Stringify</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2">This function converts&#160;a typed value - such as an object or a list - into&#160;a JSON string. It's the inverse&#160;of the <MadCap:xref href="JSON/json_parse.htm">Parse</MadCap:xref>&#160;function.</td></tr></tbody></table></div> <div><h2><a name="jwt"></a>JWT</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="JWT/jwt_decode.htm">Decode</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Decode a JWT without verifying the signature.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="JWT/jwt_sign.htm">Sign</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Encode and sign a JWT.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><MadCap:xref href="JWT/jwt_verify.htm">Verify</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body1">Decode and verify a JWT.</td></tr></tbody></table></div> <div><h2><a name="list"></a>List</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 157px;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="List/list_push.htm">Add to End</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1">Add an item to the end of a list (also known as Push).</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_unshift.htm">Add to Front</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2">Add an item to the start of a list (also known as Unshift).</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_at.htm">At</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Return an item&#160;at the specified position in a list, where the first item is in position 0.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="Primary.review-only"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_chunk.htm">Chunk</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Create a nested list of elements that are grouped into chunks of a specified size.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_collapse.htm">Collapse</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Collapse a list of objects into a single object by merging each object in the order that they appear in the list. If objects have overlapping keys, subsequent values take precedence over preceding values.</td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_concat.htm">Combine All</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Combine the contents of two or more lists.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_construct.htm">Construct</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Construct a new list&#160;from a set of values.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_difference.htm">Difference</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Create a list of items from one list that don't appear in another list.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_filterby.htm">Filter</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Filter a list to include only those items that meet a specified condition. (To filter based on more complex criteria, use <MadCap:xref href="List/list_filter.htm">Filter Custom</MadCap:xref>.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_filter.htm">Filter Custom</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Given a list, the Filter Custom function creates a&#160;list that contains only those&#160;items in the list that pass a&#160;test. The test is done by calling a helper flow once for each item (see <MadCap:xref href="../learn/about-parent-flows.htm">About scheduled and helper flows</MadCap:xref>). The flow&#160;returns true or false, as to whether that item should be included in the output list. (To filter using a simple comparison test, use the <MadCap:xref href="List/list_filterby.htm">Filter</MadCap:xref> function instead.)</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_findby.htm">Find</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Find the first&#160;item in a list that meets a specified condition. To find based on more complex criteria, use <MadCap:xref href="List/list_find.htm">Find Custom</MadCap:xref>.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_find.htm">Find Custom</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Find an item in a list by running a helper flow  on the items, one at a time, and returning the first item where the flow returns True.&#160;For simple searches, use the <MadCap:xref href="List/list_findby.htm">Find</MadCap:xref> function instead.)</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_flatten.htm">Flatten</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Take a list that contains multiple lists and convert it into a single list.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_each.htm">For Each</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Process a list&#160;by calling a helper flow&#160;for each item.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="List/list_asynceach.htm">For Each - Ignore Errors</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1">Process a list&#160;by calling a helper flow for each item. This function is almost identical to the  <MadCap:xref href="List/list_each.htm">For Each</MadCap:xref> function,&#160;with one important difference. For Each stops processing more items if an error occurs when processing one of the items in the helper flow. On the other hand, this function continues to process all items&#160;even if some hit errors in the helper flow.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_shift.htm">Get First Item</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Given a list, return two outputs: the first item and the list with that item removed (aka Shift).</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_pop.htm">Get Last Item</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Given a list, return two outputs: the last item and the list with that item removed (aka Pop).</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_groupby.htm">Group By</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Read a list and extract a list, grouped by the values in the original list at the specified path.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_includes.htm">Includes</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Check whether a list contains a particular item. The output is a True/False value - it returns true if the list contains the item, false if it doesn't. The list can be a list of any type of item; for example, a list of text, a list of numbers a list of objects.&#160;The value must be an item of that type.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_indexby.htm">Index By</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">This function is designed for a common API pattern, where a service returns a list of field values as a list of objects that each contain a field name as one key, and a field value as another key.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_intersection.htm">Intersection</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Given two or more input lists, creates a list that contains only those items that are included in all of&#160;the input lists. The lists&#160;can be of any type, as long as all lists are set to the same item type.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_length.htm">Length</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Find the number of items&#160;in a list.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="Primary.do-not-publish"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="../execute/list_errors.htm">List - Errors</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Many of the list functions call another flow to process the list (including Filter, Find, For Each, Map, Reduce, Sort, and Unique). If you encounter an error on one of these cards, you may want to look at Flow History for the flow that the function calls. The details of the error may be more evident when viewing the Flow History data for that flow.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_join.htm">List to Text</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">This function generates a single text output from a list, using an optional separator. For instance if you have a list of product names, you can use this function to create a comma-separated list of products to include in an email.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_map.htm">Map</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>The Map function converts a list to a new list. This is achieved by running a helper flow for each item in the list. See <MadCap:xref href="../learn/about-parent-flows.htm">About scheduled and helper flows</MadCap:xref>.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="Primary.do-not-publish"><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_mapobjects.htm">Map Objects</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Use the Map Objects function to map a list of objects.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_merge.htm">Merge</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Merge objects from two or more&#160;lists at matching offsets. If an item with the same key exists in multiple lists for the same offset, the value from the later list overwrites the value from an earlier list.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_pluck.htm">Pluck</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>This function takes a list of objects, and produces a sublist.&#160;It does that by plucking the key specified by <span class="uicontrol">key</span> from each object&#160;in the input list, and putting those values into an output&#160;list. The <span class="uicontrol">list</span>&#160;input must be a list of objects.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_reduce.htm">Reduce</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">This function produces&#160;a single cumulative&#160;value by&#160;running a helper flow for&#160;each item in a list. For example, you can determine the largest number in a list of numbers, or count how many text items start with "A" in a list of text strings. The result can be any type,&#160;so you can also use Reduce to build&#160;a text string, date, boolean, object, or a list of any of those.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_uniqueby.htm">Remove Duplicates</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Remove duplicates from a list.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_reverse.htm">Reverse</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Reverse the order of the items in a list.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_sample.htm">Sample</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Generate a random sample from a list.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_slice.htm">Slice</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Choose a subset of a list using start and end points.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_sortby.htm">Sort</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Sort a&#160;list from smallest to largest.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_sort.htm">Sort Custom</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Sort Custom allows you to do a custom sort on a list by calling another flow to generate the value used to sort each item.&#160;For simple sorts, use the <MadCap:xref href="List/list_sortby.htm">Sort</MadCap:xref> function instead.</td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="List/list_split.htm">Split</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Split a list at a specific index value.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="List/list_stats.htm">Stats</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Read the statistics for a list of numbers.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_sum.htm">Sum</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Calculate the sum of a list of numbers. This function accepts&#160;only a list of type number. If your numbers are formatted as&#160;a list of text, you can use the <MadCap:xref href="List/list_map.htm">Map</MadCap:xref> function to convert each item from text to a number. If your numbers are stored inside a list of objects, you can use the <MadCap:xref href="List/list_pluck.htm">Pluck</MadCap:xref> function to generate&#160;the list of numbers you need to pass into Sum.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="List/list_swap.htm">Swap</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Swap two elements in a list.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_truncate.htm">Truncate</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Cut a list down to a specified length.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_union.htm">Union</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Combine multiple lists into a single list of all the unique values contained in any of the input lists. The lists&#160;can be of any type as long as all lists are set to the same type, including the output list.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="List/list_unique.htm">Unique Custom</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Use&#160;custom logic to determine how to remove duplicates from a list.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="List/list_xor.htm">XOR</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Take two input lists and generate a new list that contains all the items that are in one or the other input list but not both.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="List/list_zip.htm">Zip</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2">Take two lists of equal length and combine them into a list of lists of each corresponding pair.</td></tr></tbody></table></div><div><h2><a name="number"></a>Number</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_abs.htm">Absolute Value</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Calculate the absolute value of a number. The absolute value is the size of the number regardless of its negative or positive state. </p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_add.htm">Add</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Return the sum of two or more input values. This card accepts two input values by default, but you can add more values.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_divide.htm">Divide</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Return the quotient from the division of two values.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_exp.htm">Exponent</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Calculate Euler's number, <code>e</code> (approximately 2.718), raised to a specified power, or exponent.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_factorial.htm">Factorial</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Calculate the factorial of a number, returning 0 if that number is less than 0. A factorial is the product of an integer and all the non-zero or non-negative integers less than it.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_expression.htm">Formula</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Build a math expression&#160;by combining operators, functions, and numbers&#160;that you enter with fields that you drag and drop into the Formula card. You can place fields of the type <span class="code">Number</span> anywhere in the expression where there can be a number. At runtime, the expression is evaluated using&#160;the values of the fields to generate a single&#160;output&#160;number.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Number/number_increment.htm">Increment</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Increase a numerical value by one.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Number/number_larger.htm">Larger</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Return a Boolean value indicating whether a value is larger than another.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_log.htm">Log</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Calculate a logarithm, which is the power to which a base number must be raised to produce a given number.</td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_multiply.htm">Multiply</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Calculate the product of two or more values.</p></td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Number/number_percentage.htm">Percentage</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Read and format the percentage of a value to a specified number of decimal places.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_power.htm">Power</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Calculate a base number raised to a specified power, or exponent.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_random.htm">Random Integer</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Generate a random integer between two numbers.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_mod.htm">Remainder</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Find the remainder after the division of one number by another.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_round.htm">Round</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Round a number to the nearest integer.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_tofixed.htm">Round Decimal Places</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Round a numerical value to a specified number of decimal places.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_floor.htm">Round Down</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Round down to the nearest integer.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Number/number_ceil.htm">Round Up</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Round up to the nearest integer.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_sign.htm">Sign</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Return the sign of a number.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Number/number_smaller.htm">Smaller</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Return a Boolean value indicating whether a value is smaller than another.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Number/number_sqrt.htm">Square Root</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Calculate the square root of a number.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="Number/number_subtract.htm">Subtract</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2"><p>Return the&#160;difference between two values.</p></td></tr></tbody></table></div> <div><h2><a name="object"></a>Object</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_clearempty.htm">Clear Empty</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Removes keys with no values associated (for example, null, "", {}) from an object. Similar to the Object - Filter function but with the added ability of choosing whether the filtering is recursive.</td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body2"><p><MadCap:xref href="Object/object_collapse.htm">Collapse</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Combine a list of objects with key and value properties into a single JSON object. This is the inverse of the Split function card.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_construct.htm">Construct</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Creates an object based on a set of user-defined inputs.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_filter.htm">Filter</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">The Filter card removes keys with no values associated (for example, null, "", {}) from an object. If the object may contain other objects, use the <MadCap:xref href="Object/object_clearempty.htm">Clear Empty</MadCap:xref> card instead.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_each.htm">For Each</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Iterates through&#160;an object key-by-key using a helper flow. For each key in the input object, the helper flow is called with the&#160;<span class="uicontrol">key </span>name and&#160;<span class="uicontrol">value </span>for that key. You can select those with the dropdown after selecting a helper flow using the <span class="uicontrol">Choose Flow</span> button.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_get.htm">Get</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Reads the value stored in an object at a given path. For example, if the object is: <code>{ "a":"one", "b":"two", "c": 17 }</code> then specifying a path of&#160;<code>b</code> returns the text&#160;string <code>two</code>. To get more than one value at a time from an object, use <MadCap:xref href="Object/object_pick.htm">Get Multiple</MadCap:xref> instead.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_pick.htm">Get Multiple</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Picks several values from an object at once. Similar&#160;to <MadCap:xref href="Object/object_get.htm">Get</MadCap:xref>, the Get Multiple card allows you to access values within an object by providing&#160;multiple keys and/or paths to values in an object.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_keys.htm">Keys</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">The Keys card generates a list of the keys within your object.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_process.htm">Map</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Processes an object key-by-key using a helper flow, creating&#160;an object as output. For each key in the input object, the helper flow is called with the&#160;<span class="uicontrol">key</span> name and&#160;<span class="uicontrol">value</span> for that key. You can select those with the dropdown after selecting a helper flow using the <span class="uicontrol">Choose Flow</span> button.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_map.htm">Map to List</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Iterates through&#160;an object key-by-key using a helper flow, creating&#160;a list as output, with one item in the list per key in the object. For each key in the input object, the helper flow is called with the&#160;<span class="uicontrol">key </span>name and&#160;<span class="uicontrol">value</span> for that key. You can select those with the dropdown after selecting a helper flow using the <span class="uicontrol">Choose Flow</span> button.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_merge.htm">Merge</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Merges multiple objects into a single object. The output object has all the keys (with their associated values) that appear in any of the input objects. If the same&#160;key appears&#160;in more than one of the input objects, only one value is taken. There are two inputs by default, but more can be added.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_move.htm">Move</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Moves a value from one key to another key, which essentially renames the key while keeping the value the same.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Object/object_set.htm">Set</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Sets a key of an object to a&#160;specified value, creating&#160;a key&#160;if it doesn't exist already.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_size.htm">Size</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Returns the number of elements in an object.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Object/object_split.htm">Split</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Split an object into a list of objects, each with key and value properties. This is the inverse of the Collapse function card.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_unset.htm">Unset</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Deletes a key/value pair from an object.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Object/object_unzip.htm">Unzip</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Convert an object to two lists, one with keys and the other with values.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Object/object_values.htm">Values</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">The Values card generates a list of the values within your object.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><MadCap:xref href="Object/object_zip.htm">Zip</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body1">Create an object from two lists, by mapping keys from the first lists to values from the second. This is useful when creating an object that has keys with dots in the key names.</td></tr></tbody></table></div><div><h2><a name="stash"></a>Tables</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1" MadCap:conditions=""><td class="TableStyle-standard-BodyF-Column1-Body1"><p><MadCap:xref href="Tables/stash_cleartable.htm">Clear Table</MadCap:xref></p></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Delete all rows in a table.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Tables/stash_createrow.htm">Create Row</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Create a row&#160;in a&#160;table.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="Primary.do-not-publish"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Tables/stash_createtable.htm">Create Table</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">This function creates a Table and returns the Table ID for that table. Then you can work with the table in subsequent cards, for example to add rows to it, or import rows from a CSV or another Table. The new Table is created in the "My Folder" personal folder for the user who is the owner of the flow. The table may appear in another user's "My Folder" personal folder if the Create Table card is in a helper flow. When the Create Table card exists in a helper flow, whoever executed the helper flow has the table appear in their "My Folder" personal folder.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Tables/stash_deleterow.htm">Delete Row</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Delete a row in a table.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Tables/stash_exporttocsv.htm">Export To CSV</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Export a&#160;table to a CSV file, including all rows or a filtered subset of rows.</p><p MadCap:conditions="Primary.do-not-publish"> &#160;The CSV file is created within your filesystem. You can use an upload card from&#160;a cloud service connector (for example Google Drive or Box) to move it to another cloud service or an SFTP upload. CSV files can be imported into most spreadsheet programs including Excel.</p></td></tr><tr class="TableStyle-standard-Body-Body2" MadCap:conditions="Primary.do-not-publish"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Tables/stash_import.htm">Import Data from CSV</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">You can import data into a table from a CSV file.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Tables/stash_importfromcsv.htm">Import From CSV</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Import&#160;the contents of a CSV file into a Table.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Tables/stash_readrow.htm">Read Row</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Read the values from a row in a&#160;table.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Tables/stash_readtable.htm">Read Table</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Return the column schema of a table, as identified by the table ID.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Tables/stash_searchrows2.htm">Search Rows</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Find&#160;rows in a table &#160;that match a set of conditions.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><MadCap:xref href="Tables/stash_updaterow.htm">Update Row</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body1">Update a row in a table.</td></tr></tbody></table></div><div><h2><a name="text"></a>Text</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_at.htm">At</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Return the single character at a specified position in a text input, where 0 is the first position. To get a whole segment rather than a single character, use the <span class="uicontrol">Text Segment</span> function. To search for a single character, use <span class="uicontrol">Find</span>.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_base64.htm">Base64</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Return the base64 encoding of a string.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_base64decode.htm">Base64 Decode</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Return text that is decoded from base64. </p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_compose.htm">Compose</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Combines any text that you type and any fields you drag and drop in.&#160;At runtime, the text is&#160;combined with the values of the fields to generate a single&#160;text output.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_concat.htm">Concatenate</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Take two or more string inputs and combine them without spaces into a single text output.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_email.htm">Find Email</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Find and return the first instance of a valid email address in a text string.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_find.htm">Find</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Find the first instance of a string within another string.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_lastindexof.htm">Find Last</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Search for the last match inside a text string, where <span class="code">0</span> is the first position. The function card returns <span class="code">-1</span> if no match is found.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_length.htm">Length</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Calculate the number of characters in a string of text.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_match.htm">Find Pattern</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Search text for the first match to a specified pattern using regular expressions.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_random.htm">Random</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Return random text of a specified length.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_replace.htm">Replace</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Search and replace text.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_replaceany.htm">Replace Patterns</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Find and replace any matched multiple patterns with a single value. For any find and replace that looks for a single text or pattern, use <MadCap:xref href="Text/text_replace.htm">Replace</MadCap:xref>.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_split.htm">Split</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Split text into a list of text segments separated by commas or another specified delimiter.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_substr.htm">Text Segment</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Extract text from a string value.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_tolowercase.htm">To Lower Case</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Convert all letters in a string to lowercase.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="Text/text_touppercase.htm">To Upper Case</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1"><p>Convert all letters in a string to uppercase.</p></td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="Text/text_trim.htm">Trim</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Remove leading and trailing blank space from text.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><MadCap:xref href="Text/text_uuid.htm">Unique ID</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body1"><p>Generate a random universally unique identifier (UUID), sometimes called a globally unique identified (GUID). The identifier consists of 32 hexadecimal (base 16) digits, displayed in five groups and separated by hyphens.</p></td></tr></tbody></table></div><div><h2><a name="truefalse"></a>True/False</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="True-False/truefalse_nor.htm">All False?</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Return true if all inputs are false. Otherwise, it returns false. (Also known as the Boolean operator NOR.)</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="True-False/truefalse_and.htm">And</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Return true if all inputs are true. Otherwise, it returns false.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="True-False/truefalse_nand.htm">Any False?</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Return true if any of the inputs are false. Otherwise, it returns false (also known as NAND).</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="True-False/truefalse_compare.htm">Compare</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Run a simple true or false test. For instance, you might check to see if a <span class="uicontrol">Type </span>field is equal to "Customer" or if a <span class="uicontrol">Price </span>field is greater than 1000.</td></tr><tr class="TableStyle-standard-Body-Body1" MadCap:conditions="MultiProdPublish.Workflows"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="True-False/truefalse_expression.htm">Expression</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Build a True or False&#160;expression&#160;by combining operators and values&#160;that you type with&#160;fields that you drag and drop in.&#160;Place fields anywhere in the expression where there can be a value. At runtime, the expression is evaluated using&#160;the values of the fields to generate a single&#160;output&#160;of true or false. When using non-True/False inputs, number fields evaluate to false when 0; otherwise true. Text fields evaluate to false when null or "false". Otherwise, it returns true. Date fields convert to a timestamp that works in comparisons.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="True-False/truefalse_not.htm">Not</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Takes a true or false input and returns the opposite value.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="True-False/truefalse_or.htm">Or</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Return true if any inputs are true, otherwise false.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="True-False/truefalse_xor.htm">Or (Exclusive)</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">The Exclusive Or true/false operator (also known as XOR) returns true if one, and only one, input is true. Otherwise, it returns false.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyC-Column1-Body1"><MadCap:xref href="True-False/truefalse_xnor.htm">XNOR</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body1">A True/False operator that returns true if both inputs are true or both inputs are false. Otherwise, it returns false. This is the opposite of the Exclusive Or (or XOR) operation.</td></tr></tbody></table></div> <div><h2><a name="url"></a>URL</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="URL/url_decodecomponent.htm">Decode Component</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Decode a URL-encoded component such as the value of a query parameter.&#160;This function card decodes all URL-encoded characters and outputs the decoded text.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="URL/url_decode.htm">Decode Query</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2"><p>Decode a URL-encoded query string into a query object.</p></td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="URL/url_encodecomponent.htm">Encode Component</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Encode text into a URL-encoded text for use within a URL.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyF-Column1-Body2"><MadCap:xref href="URL/url_encode.htm">Encode Query</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body2">Encode a query object into a URL-encoded query object.</td></tr><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="URL/url_format.htm">Format</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Construct&#160;a URL string from its components.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="URL/url_parse.htm">Parse</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2">Parse a URL string into its components with proper encoding.</td></tr></tbody></table></div> <div><h2><a name="xml"></a>XML</h2><table style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/standard.css');" class="TableStyle-standard" cellspacing="0"><col class="TableStyle-standard-Column-Column1" style="width: 20%;" /><col class="TableStyle-standard-Column-Column1" /><thead><tr class="TableStyle-standard-Head-Header1"><th class="TableStyle-standard-HeadF-Column1-Header1"><p>Function</p></th><th class="TableStyle-standard-HeadD-Column1-Header1"><p>Description</p></th></tr></thead><tbody><tr class="TableStyle-standard-Body-Body1"><td class="TableStyle-standard-BodyF-Column1-Body1"><MadCap:xref href="XML/xml_build.htm">Build</MadCap:xref></td><td class="TableStyle-standard-BodyD-Column1-Body1">Convert an object to an XML string.</td></tr><tr class="TableStyle-standard-Body-Body2"><td class="TableStyle-standard-BodyC-Column1-Body2"><MadCap:xref href="XML/xml_parse.htm">Parse</MadCap:xref></td><td class="TableStyle-standard-BodyA-Column1-Body2">This function converts an XML string to an object. By converting the XML&#160;string to an object, you can use many of the built-in functions (such as those in the <MadCap:xref href="#list">List</MadCap:xref> and <MadCap:xref href="#object">Object</MadCap:xref> categories) to&#160;process and use values from the XML string in the rest of your flow.</td></tr></tbody></table></div></div>
        </div>
    </body>
</html>