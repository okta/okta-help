<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Object/object_set.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="Object" />
        <meta name="coveo:method" content="set" />
        <meta name="coveo:method-description" content="Sets a key of an object to a specified value creatinga new keyif it doesn't exist already." />
        <meta name="coveo:method-type" content="action" />
    </head>
    <body>
        
        
            <div data-content-id="hoc-main-content">
                <h1>Set</h1>
                <p>Sets a key of an object to a&#160;specified value, creating&#160;a new key&#160;if it doesn't exist already.</p>
                <h4>Input Fields</h4>
                <ul>
                    <li>
                        <p><span class="uicontrol">object</span>: &#160;the object you are starting with</p>
                    </li>
                    <li>
                        <p><span class="uicontrol">path</span>: &#160;can be a single top-level key name (for example, "customer"), a dot-delimited path (e.g. "customer.id" where "id" is a key inside&#160;a sub-object or "items.5" where 5 is&#160;an element inside a list), or you can change the type of <span class="uicontrol">path</span> to accept a list of text each containing a single key name for the path</p>
                    </li>
                    <li>
                        <p><span class="uicontrol">value</span>: &#160;the new value for the key. Be sure to set the type of <span class="uicontrol">value</span> to match the desired type (e.g. text or number) for the key.</p>
                    </li>
                </ul>
                <h4>Output Fields</h4>
                <ul>
                    <li><span class="uicontrol">output</span>: &#160;the new object containing the updated value in the specified path</li>
                </ul>
                <h4>Examples</h4>
                <p>If <span class="uicontrol">object</span> is <code>{"foo":"1"}</code>, <span class="uicontrol">path</span> is <code>foo</code>, and <span class="uicontrol">value</span> is <code>2</code>, then <span class="uicontrol">output</span> is <code>{"foo":"2"}</code>.</p>
                <p>If <span class="uicontrol">object</span> is <code>{"foo":"1"}</code>, <span class="uicontrol">path</span> is <code>bar</code>, and <span class="uicontrol">value</span> is <code>2</code>, then <span class="uicontrol">output</span> is <code>{"foo":"1","bar":"2"}</code>.</p>
                <p>If <span class="uicontrol">object</span> is <code>{"foo":"1"}</code>, <span class="uicontrol">path</span> is <code>bar.baz</code>, and <span class="uicontrol">value</span> is <code>2</code>, then <span class="uicontrol">output</span> is <code>{"foo":"1","bar":{"baz":"2"}}</code>.</p>
                <p>If <span class="uicontrol">object</span> is <code>{"foo":["0","1","2"]}</code>, <span class="uicontrol">path</span> is <code>foo.1</code>, and <span class="uicontrol">value</span> is <code>9</code>, then <span class="uicontrol">output</span> is <code>{"foo":["0","9","2"]}</code>.</p>
                <p>If <span class="uicontrol">object</span> is <code>{"foo":{"bar":"1"}}</code>, <span class="uicontrol">path</span> is <code>foo.bar</code>&#160;and <span class="uicontrol">value</span> is <code>2</code>, then <span class="uicontrol">output</span> is <code>{"foo":{"bar":"2"}}</code>. &#160;</p>
                <p>Alternatively, you can set the type of&#160;<span class="uicontrol">path</span> to be a list of text and then pass in "foo" and "bar" as the list items to get the same result.</p>
                <p>When using a list of text, dots are assumed to be part of the desired key name so using <code>foo.bar</code> as the input if <span class="uicontrol">path</span> is set to a list would result in the <span class="uicontrol">output</span><code>{"foo":{"bar":1},"foo.bar":2}</code></p>
                <MadCap:snippetBlock src="../functions-see-also.flsnp" />
            </div>
    </body>
</html>
