<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Object/object_construct.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="Object" />
        <meta name="coveo:method" content="construct" />
        <meta name="coveo:method-description" content="Creates a new object based on a set of user-defined inputs." />
        <meta name="coveo:method-type" content="action" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Construct</h1>
            <p>Creates an object based on a set of user-defined inputs.</p>
            <h4>Input Fields</h4>
            <ul>
                <li><span class="uicontrol">(user created fields)</span>: Create one input for each key that you want to create in the output object. The input names become the key names in the object that gets created. Each input can be set to any type, including object or list. The values are populated using the output fields dragged in from prior cards in your flow.</li>
            </ul>
            <h4>Output Fields</h4>
            <ul>
                <li><span class="uicontrol">output</span>: The newly constructed object.</li>
            </ul>
            <h4>Example</h4>
            <p>As an example, consider the scenario where you want to create an object that represents a customer. This customer object has four keys:  <span class="userinput">First name</span>, <span class="userinput">First name</span>, <span class="userinput">Age</span>, and <span class="userinput">Loyalty</span>. The last key indicates if the customer is a member of your loyalty plan.</p>
            <p>With the function card, create inputs for each key name and set the input types. Both name fields default to text, but <span class="userinput">Age</span> should be a number and <span class="userinput">Loyalty</span> should be set to a true or false value:</p>
            <p>
                <img src="../../../../Resources/Images/Workflows/object-construct.png" id="" style="max-height: 50%;" class="thumbnail" />
            </p>
            <p>Then you can add the construct function to your flow and drag any fields to the card inputs. For example, when the flow runs for your customer named Jane Smith, age 29, who is a loyalty member, you'd get an output object  like this:</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetCaption>Output object</MadCap:codeSnippetCaption>
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{ 
  "First name": "Jane", 
  "Last name": "Smith", 
  "Age": 29,
  "Loyalty": true
 }</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p>You can build any object using this function. You can set the inputs to any type, including lists.</p>
            <p>As an advanced use case, you might want to define one of the keys as an object that gets constructed at runtime. To do this, you can use two object constructs. First define the inner object and then define a second object with one of the keys as an object type. Finally, drag the output of the first card (which is an object)&#160;onto the object key of the second card.</p>
            <MadCap:snippetBlock src="../functions-see-also.flsnp" />
        </div>
    </body>
</html>