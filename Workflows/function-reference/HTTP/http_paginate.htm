<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Encryption/encryption_hmac.htm" />
        <link href="../../../../Resources/TableStyles/standard-horizonal-borders-only.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="HTTP" />
        <meta name="coveo:method" content="paginate" />
        <meta name="coveo:method-description" content="Use a helper flow to paginate through multiple pages of an HTTP response." />
        <meta name="coveo:method-type" content="action" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Paginate</h1>
            <MadCap:snippetBlock src="../../connector-builder/resources/cbv2-only-functions.flsnp" />
            <p>Use a helper flow to paginate through multiple pages of an HTTP response.</p>
            <p>For additional best practices when using the Paginate function card, see:</p>
            <ul>
                <li>
                    <p>
                        <MadCap:xref href="http_paginate_set-max-page-index.htm">Paginate: Set a Max Page Index</MadCap:xref>
                    </p>
                </li>
                <li>
                    <p>
                        <MadCap:xref href="http_paginate_api-endpoint.htm">Paginate: API Endpoint</MadCap:xref>
                    </p>
                </li>
            </ul>
            <h2 class="relnotes">Overview</h2>
            <p>The internal paginate function that exists in Workflows today is essentially a Do While loop that looks for a <code>break</code> keyword in order to decide whether to keep looping. When the loop starts, an object is passed into the <span class="uicontrol">Object</span> field of the function, and the values within that object are managed within a helper flow. As the values in that object get updated, they are returned to the function and the object again gets passed back into the helper flow with the updated values.</p>
            <div class="note_cautionOkta">
                <p class="noteContent">Proper use of the <code>break</code> field is very important to the paginate function. If it is not used properly, the flow could run until the platform hits a maximum count of 5,000 iterations. In order to stop the iteration, the <code>break</code> field must be removed from the object.</p>
            </div>
            <h2 class="relnotes">Input</h2>
            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col style="width: 20%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 55%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 15%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 10%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Field</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Definition</th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Type</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">Required</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Object</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Object passed into the helper flow.  This can hold any number of keys and values such as <code>offset</code>, <code>page_index</code>, <span class="code">url</span>, and a list object used to collect records. It is required that there is a key that represents the <code>break</code> to tell the function when to stop iterating.  It should be initially set to false. 

</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Object</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">TRUE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Path</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Key for the field in the <span class="uicontrol">Object</span> input to monitor for when to stop the loop.  This is commonly called <code>break</code>, and it should be initially set to <span class="code">FALSE</span>. In order to stop the iteration, the <span class="code">break</span> field must be removed from the <span class="uicontrol">Object</span> input.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Text</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">TRUE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Helper Flow</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Flow used to process the object passed into the <span class="uicontrol">Object</span> input field.  

</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Flow</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">TRUE</td>
                    </tr>
                </tbody>
            </table>
            <h2 class="relnotes">Output</h2>
            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col style="width: 20%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 55%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 25%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Field</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Definition</th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">Type</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Output</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">
                            <p>Object containing the new values. </p>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">Object</td>
                    </tr>
                </tbody>
            </table>
            <h3 class="relnotes">Basic Example</h3>
            <p>In this example, you want to iterate only a certain number of times. This should be your first task when you begin working with pagination and will help with testing your flows. You will need to create an object with three values that will get passed to your helper flow. These are examples of key names:</p>
            <ul>
                <li>
                    <p><span class="uicontrol">page_index</span>: Current count of iterations.</p>
                </li>
                <li>
                    <p><span class="uicontrol">max_page_index</span>: Maximum number of times that the helper flow should iterate.</p>
                </li>
                <li>
                    <p><span class="uicontrol">break</span>: Value to monitor for when to stop the loop.</p>
                </li>
            </ul>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “page_index”: 0,
    “max_page_index”: 10,
    “break”: false
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p>In the helper flow, the inputs that you defined on the event card will need to match the keys defined in the object above: <code>page_index</code>, <code>max_page_index</code>, and <code>break</code>.  You can then use these within your flow.  You can use the Number Add function card to increase the <code>page_index</code> on each iteration, and return that new number to the Paginate function card.</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “page_index”: 1,
    “max_page_index”: 10,
    “break”: false
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p>The counter will increase as the flow continues to iterate. Once <code>page_index</code> hits 10, the <code>break</code> condition should be removed from the object to stop the iteration.</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “page_index”: 10,
    “max_page_index”: 10,
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <h3 class="relnotes" MadCap:conditions="Primary.do-not-publish">Example: HTTP pagination</h3>
            <p MadCap:conditions="Primary.do-not-publish">The same concept applies when combining multiple pages of data from an HTTP response to create a single list of items.  This can be done by adding a few more values into the <span class="uicontrol">Object</span> field of the Paginate function card.  These are examples of key names:</p>
            <ul>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">offset</span>: Position in the dataset of a particular record. By specifying offset, you retrieve a subset of records starting with the offset value.</p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">records_per_page</span>: Determines how many records to retrieve starting from the offset.</p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">results_list</span>: This is an empty list of items to which each page of new records will be added.</p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">connection</span>: Currently, you’ll need to pass the connection context along to the helper flow.  In the future, this should be automatically included.</p>
                </li>
            </ul>
            <MadCap:codeSnippet MadCap:conditions="Primary.do-not-publish">
                <MadCap:codeSnippetCopyButton MadCap:conditions="Primary.do-not-publish" />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
   "offset":0,
   "records_per_page":10,
   "results_list":[],
   "break":false,
   "connection":{
      "blob":{
         "api_key":"SlESyU45eGxqM8dDi3ucmodj3sJ1AGGQ"
      }
   },
   "page_index":1,
   "max_page_count":10
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p MadCap:conditions="Primary.do-not-publish">In the helper flow, you can use the httpHelper flow you’ve already created for a connector to make your requests to the service and process the data in the response.  As an example, you can use the List Union (Combine Unique) function card to add each page of data to the last, as well as using the Number Add function card to manage the offset (by adding it to<code> records_per_page</code>).   These new values get updated in the input object and returned to the Paginate function card.  Once again, remove the <code>break</code> field from the object to stop the iteration.</p>
            <MadCap:codeSnippet MadCap:conditions="Primary.do-not-publish">
                <MadCap:codeSnippetCopyButton MadCap:conditions="Primary.do-not-publish" />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
  "offset":100,
  "records_per_page":10,
  "results_list":[
     1,
     2,
     3,
     4,
     5,
     "..."
  ],
  "connection":{
     "blob":{
        "api_key":"SlESyU45eGxqM8dDi3ucmodj3sJ1AGGQ"
     }
  },
  "page_index":10,
  "max_page_count":10
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p MadCap:conditions="Primary.do-not-publish">Each service manages pagination a little differently, so you’ll need to refer to the specific API documentation.  In addition to the above, you’ll need to determine how the API indicates that there are no more pages of data, and manage that much the same way you do with <code>max_page_count</code>.  One way to handle this would be to use the If/ElseIf function card.</p>
            <p MadCap:conditions="Primary.do-not-publish">In the following example, look for when the <code>next</code> key in the response is empty to figure out when there are no more pages of records.  When that key no longer has a value, you can remove the <code>break</code> field from the object.</p>
            <p MadCap:conditions="Primary.do-not-publish">
                <img src="../../../../Resources/Images/Workflows/connector-builder/paginate-http-pagination-example.png" style="width: 642px;height: 305px;" />
            </p>
            <h2>Related topics</h2>
            <p>
                <MadCap:xref href="http_paginate_set-max-page-index.htm">Paginate: Set a Max Page Index</MadCap:xref>
            </p>
            <p>
                <MadCap:xref href="http_paginate_api-endpoint.htm">Paginate: API Endpoint</MadCap:xref>
            </p>
            <p>
                <MadCap:xref href="../functions.htm">Functions in Workflows</MadCap:xref>
            </p>
            <p MadCap:conditions="MultiProdPublish.Workflows">
                <MadCap:xref href="../../workflows-elements.htm">About the elements of Okta Workflows</MadCap:xref>
            </p>
        </div>
    </body>
</html>