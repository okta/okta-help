<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/Encryption/encryption_hmac.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="HTTP" />
        <meta name="coveo:method" content="paginate" />
        <meta name="coveo:method-description" content="Set how many times the Paginate function card will iterate." />
        <meta name="coveo:method-type" content="action" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Paginate: Set a Max Page Index</h1>
            <MadCap:snippetBlock src="../../connector-builder/resources/cbv2-only-functions.flsnp" />
            <p>When working with the Paginate function card, it’s important to have control over how many times the function will iterate.  The Workflows platform has a maximum iteration count of 5000 on this function, and being able to reduce that while testing flows is extremely important.  This example will show how to set a <span class="code">max_page_index</span> of 10 and halt pagination once that index has been reached.  This should be your first task when working with pagination in Workflows.</p>
            <div class="note_tipOkta">
                <p class="noteContent">See <MadCap:xref href="http_paginate.htm">Paginate</MadCap:xref> to get started with this function card, and <MadCap:xref href="http_paginate_api-endpoint.htm">Paginate: API Endpoint</MadCap:xref> for additional best practices when using this card. </p>
            </div>
            <p>First, create an object with three key/value pairs that will get passed into the Paginate function card.  This is done using the Object Construct card.</p>
            <p>
                <img src="../../../../Resources/Images/Workflows/connector-builder/construct.png" style="width: 160px;height: 293px;" />
            </p>
            <p>This is the resulting object:</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “index”: 0,
    “max_page_index”: 10,
    “break”: false
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p>The pagination function requires the use of a helper flow, and the inputs defined on the helper flow event card will need to match the keys defined in the pagination object above:</p>
            <p><span class="code">page_index</span>, <span class="code">max_page_index</span>, and <span class="code">break</span>.</p>
            <p> The platform will extract the values from the pagination object and make them accessible in the flow.</p>
            <p>When the helper flow executes, the values passed into the flow need to be managed.  Since the goal is to track the number of iterations made by the pagination function, the index will need to be increased with each iteration.  This can be done using the Number Add function.  Once the index has been increased, the pagination object needs to be reconstructed so it can be returned to the pagination function.</p>
            <p>
                <img src="../../../../Resources/Images/Workflows/connector-builder/paginate-object.png" style="width: 523px;height: 277px;" />
            </p>
            <p>This is the resulting object:</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “index”: 1,
    “max_page_index”: 10,
    “break”: false
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <p>Once <span class="code">index</span> reaches 10, the break condition should be removed from the object to stop the pagination function from iterating again.  This can be done using the Branching If/Else function by setting the If condition to <span class="code">index</span> equals <span class="code">max_page_index</span>.  Within that condition, the Object Unset function can be used to remove the <span class="code">break</span> key/value pair.  The resulting new pagination object is then returned to the parent flow and the pagination will stop.</p>
            <p>
                <img src="../../../../Resources/Images/Workflows/connector-builder/paginate-object-parent.png" style="width: 652px;height: 282px;" />
            </p>
            <p>This is the resulting object:</p>
            <MadCap:codeSnippet>
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{
    “index”: 10,
    “max_page_index”: 10,
}</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <h2>Related topics</h2>
            <p>
                <MadCap:xref href="http_paginate.htm">Paginate</MadCap:xref>
            </p>
            <p>
                <MadCap:xref href="http_paginate_api-endpoint.htm">Paginate: API Endpoint</MadCap:xref>
            </p>
            <p>
                <MadCap:xref href="../functions.htm">Functions in Workflows</MadCap:xref>
            </p>
            <p MadCap:conditions="MultiProdPublish.Workflows">
                <MadCap:xref href="../../workflows-elements.htm">About the elements of Okta Workflows</MadCap:xref>
            </p>
        </div>
    </body>
</html>
