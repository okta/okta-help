<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link href="../../../../Resources/TableStyles/standard-horizonal-borders-only.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/function-reference/HTTP/http_raw.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:connector" content="HTTP" />
        <meta name="coveo:method" content="raw" />
        <meta name="coveo:method-description" content="Advanced." />
        <meta name="coveo:method-type" content="action" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Raw Request</h1>
            <p>This method performs a raw HTTP request,&#160;allowing you as a flow builder to control all aspects of the HTTP request. This&#160;allows a flow to call an XML service, call an HTML service, or various other advanced usages. </p>
            <p>The other API Connector functions are optimized for ease-of-use with typical JSON-based services. The <span class="wintitle">Raw Request</span> function card is more flexible. </p>
            <div class="note_cautionOkta">
                <p class="noteContent">Any data flowing through this card (or any card) may be logged in Flow History and exposed to other Workflows admins. Sensitive information, such as access tokens, shouldn't be entered, read, or processed in plain text in a flow. Store this information securely in a connector.</p>
            </div>
            <p>Here are a few of the use cases for this function card:</p>
            <ul>
                <li>
                    <p>Call an XML service: Use the XML <MadCap:xref href="../XML/xml_build.htm" alt="XML Build function">Build</MadCap:xref> function card to create an XML string containing&#160;your request&#160;and drag that into the&#160;<span class="uicontrol">Body</span> input of the <span class="wintitle">Raw Request</span> function card. Then use the XML&#160;<MadCap:xref href="../XML/xml_parse.htm">Parse</MadCap:xref> function to parse the&#160;<span class="uicontrol">Body</span> output and create a JSON response that you can then use in the rest of your flow.&#160;This also works  with an HTML service.</p>
                </li>
                <li>
                    <p>Call a JSON API with a list: The API Connector Post function implicitly forces you to pass a JSON object in the body. Each input you create in the&#160;<span class="wintitle">Body</span> section becomes a key in the request body.&#160;If you want to pass something rather than an object, such as a list of objects, then you can do so using the <span class="wintitle">Raw Request</span> function card. Build the list that you want by using the List functions, then call the JSON&#160;<MadCap:xref href="../JSON/json_stringify.htm">Stringify</MadCap:xref> function card to create a string, and drag that string to the&#160;<span class="uicontrol">Body</span> input of the <span class="wintitle">Raw Request</span> function card.</p>
                </li>
                <li>
                    <p>Build a query programmatically: You may have logic that determines your query string at runtime. Use the Object function cards to create a query object in your flow, then drag your object to the&#160;<span class="uicontrol">Query</span> input of the <span class="wintitle">Raw Request</span> function card. The query object is converted to a URL&#160;query string: If your query object is <span class="code">{ "x": "one", "y": "two"}</span>, then the query string is: &#160;<span class="code">?x=one&amp;y=two</span>.</p>
                </li>
                <li>
                    <p>Build headers programmatically: The other API Connector functions implicitly force you to define your header field names at design time. The values can be dynamic, but the header field names are fixed.&#160;If you want to define them in the flow, use the Object function cards to create a <span class="uicontrol">Headers</span>&#160;object in your flow, then drag your object to the&#160;<span class="uicontrol">Headers</span>&#160;input of the <span class="wintitle">Raw Request</span> function card.&#160;For example if the headers object is <span class="code">{ "Accept": "text/plain" }</span>, then the header string for the request is&#160;<span class="code">Accept: text/plain</span>.</p>
                </li>
                <li>
                    <p>Call a JSON API with dynamic keys: The  API&#160;Connectors <MadCap:xref href="http_post.htm">Post</MadCap:xref> function implicitly forces you to create the keys in the request body at design time. If you want to build this at runtime instead, based on input parameters, then build the object using the&#160;Object function cards, pass that to&#160;the  JSON&#160;<MadCap:xref href="../JSON/json_stringify.htm">Stringify</MadCap:xref> function card, then&#160;drag that string into the&#160;<span class="uicontrol">Body</span> input of the <span class="wintitle">Raw Request</span> function card.</p>
                </li>
            </ul>
            <p>The <span class="wintitle">Raw Request</span> function card is flexible enough to form any HTTP call. If the other HTTP functions don't have the flexibility you need, use the <span class="wintitle">Raw Request</span> function card instead.</p>
            <h2 class="relnotes">Input</h2>
            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col style="width: 20%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 55%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 15%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 10%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Field</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Definition</th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Type</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">Required</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">URL</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">URL for the HTTP request.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Text</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">TRUE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Method</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">HTTP method. Options are <span class="uicontrol">GET</span>, <span class="uicontrol">POST</span>, <span class="uicontrol">PUT</span>, <span class="uicontrol">PATCH</span>, or <span class="uicontrol">DELETE</span>.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Dropdown</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">TRUE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Headers</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">An object representing the headers for the request. Each key of the header is parsed into a header string as&#160;<span class="code">"key: value"</span>. For example, <span class="code">"Accept: text/plain"</span>.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Object</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">FALSE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Query</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">An object representing the URL query string. Each key of the header is appended to the URL string as follows: &#160;<span class="code">url?key1=value1&amp;key2=value2&amp;...</span></td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Object</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">FALSE</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1"><span class="uicontrol">Body</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">HTTP request body.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">Text</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">FALSE</td>
                    </tr>
                </tbody>
            </table>
            <h2>Output</h2>
            <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                <col style="width: 20%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 55%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <col style="width: 25%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                <thead>
                    <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Field</th>
                        <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Definition</th>
                        <th class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">Type</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="wintitle">Response</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">&#160;</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">&#160;</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Status Code</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">
                            <MadCap:snippetBlock src="../../resources/snippets/field/output-status-code.flsnp" />
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Number</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Headers</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1">Detailed context for the status code, unrelated to the output body. Response headers depend on your selected HTTP request option. Not all headers are response headers. The header is similar to <span class="code">{"Content-type":"application/json"}</span>.</td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Object</td>
                    </tr>
                    <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1"><span class="uicontrol">Body</span>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1">
                            <p>Data returned from your selected HTTP request.</p>
                            <p>For example, the data from a <span class="userinput">GET</span> request.</p>
                        </td>
                        <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">Text</td>
                    </tr>
                </tbody>
            </table>
            <MadCap:snippetBlock src="../functions-see-also.flsnp" />
        </div>
    </body>
</html>