<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:onlyLocalStylesheets="False" MadCap:searchable="True" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link href="../../../Resources/TableStyles/standard-horizonal-borders-only.css" rel="stylesheet" MadCap:stylesheetType="table" /><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="coveo:title" content="About helper flows" />
        <meta name="coveo:method-description" content="" />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>Helper flows</h1>
            <p>Helper flows allow for more efficient management and running of parent flows, such as an application event-driven or API&#160;Endpoint flow. </p>
            <div class="note_cautionOkta">
                <p class="noteContent">In the Workflows interface, a child flow is now referred to as a helper flow. The functionality for such flows remains unchanged. </p>
            </div>
            <p>
                <p>Helper flows are useful in several scenarios:</p>
                <ul>
                    <li>
                        <p>You reuse a series of steps multiple times in a single flow or across multiple flows. By moving that series of steps into their own helper flow, you only need to create one flow that can be called multiple times.  Run these steps from other flows by using the <MadCap:xref href="../function-reference/Flow-Control/flocontrol_spawn.htm">Call Flow</MadCap:xref> or <MadCap:xref href="../function-reference/Flow-Control/flocontrol_run.htm">Call Flow Async</MadCap:xref> functions. </p>
                    </li>
                    <li>
                        <p>You want to process a list one item at a time. For example, you can run a series of steps on each list item using the <MadCap:xref href="../function-reference/List/list_each.htm">For Each</MadCap:xref> function.&#160;Or, you can transform a list into a new list using the <MadCap:xref href="../function-reference/List/list_map.htm">Map</MadCap:xref> function.</p>
                    </li>
                    <li>
                        <p>You want to break a large flow into smaller, more manageable parts.</p>
                    </li>
                </ul>
                <div class="note_tipOkta" MadCap:conditions="Primary.do-not-publish">
                    <p class="noteContent">Helper flows, whether active or inactive, don't count against the flow limit for a Workflows tenant. Turn on a helper flow before calling it from other flows.</p>
                </div>
                <h2><a name="About3"></a>Use helper flows with list functions</h2>
                <p>Helper flows are helpful for list functions because they enable you to process individual items in a list. </p>
                <p>Helper flows can have:</p>
                <ul>
                    <li>
                        <p>Inputs that correspond to the type of item in the list</p>
                    </li>
                    <li>
                        <p>Functions that perform a task on each item</p>
                    </li>
                    <li>
                        <p>A&#160;return (found in the <span class="wintitle">Control</span> category).</p>
                    </li>
                </ul>
                <p>For example, you can convert an object into a list of objects, where each pair of keys and values gets converted to an object that has both <span class="code">propertyname</span> and <span class="code">propertyvalue</span> keys. This pattern is common among cloud APIs. where you prefix the <span class="code">propertyname</span> string with the <span class="code">custom:</span> text string. You can do that with a helper flow. It accepts a <span class="uicontrol">key</span>, a <span class="uicontrol">value</span>, and a constant <span class="uicontrol">prefix</span>. The constant is the same across all iterations as the parent flow passes this constant to the helper flow. The helper flow returns back an object with two keys.</p>
                <p>That flow, when used with <span class="userinput">object.map</span>, can convert this simple object:</p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">{"this":"that","up":"down","left":"right"}</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
                <p>It returns the result in a more useful list:</p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">[
	{
		"propertyname":"custom:this",
                
		"propertyvalue":"that"
                
	},
                
	{
                
		"propertyname":"custom:up",
                
		"propertyvalue":"down"
                
	},
                
	{
                
		"propertyname":"custom:left",
                
		"propertyvalue":"right"
                
	}
]</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
                <h2 class="relnotes"><a name="Outputs"></a>Outputs from helper flows</h2>
                <p>Each helper flow card has the following outputs:</p>
                <table style="width: 100%;margin-left: 0;margin-right: auto;mc-table-style: url('../../../Resources/TableStyles/standard-horizonal-borders-only.css');" class="TableStyle-standard-horizonal-borders-only" cellspacing="14">
                    <col style="width: 25%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                    <col style="width: 75%;" class="TableStyle-standard-horizonal-borders-only-Column-Column1" />
                    <thead>
                        <tr class="TableStyle-standard-horizonal-borders-only-Head-Header1">
                            <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadE-Column1-Header1">Field</th>
                            <th style="text-align: left;" class="TableStyle-standard-horizonal-borders-only-HeadD-Column1-Header1">Definition</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Inputs to this Flow</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Use the <span class="uicontrol">Click or drag to create</span> option to add custom fields. Give each a name and data type (such as <span class="code">Text</span> or <span class="code">Number</span>). Each custom field that you create corresponds to an expected input from any flow that calls your helper flow.</td>
                        </tr>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">context</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">Outputs in this section are automatically assigned values whenever the flow runs.</td>
                        </tr>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Index</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">This number output is assigned&#160;a value when  a function that loops through the items of a list (such as the <MadCap:xref href="../function-reference/List/list_each.htm">For Each</MadCap:xref> or <MadCap:xref href="../function-reference/List/list_map.htm">Map</MadCap:xref> functions) calls the helper flow.  The value of <span class="uicontrol">Index</span>&#160;corresponds to the item's position in the list (starting with zero) as this instance of the flow processes the list.</td>
                        </tr>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Caller</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
                                <p>The keys of the <span class="uicontrol">Caller</span> object tell you:</p>
                                <ul>
                                    <li>Which flow called the helper flow (<span class="uicontrol">id</span> and <span class="uicontrol">name</span>)</li>
                                    <li>Which particular execution of the flow made the call (<span class="uicontrol">execution_id</span>)</li>
                                    <li>Which particular step in the flow it was called (<span class="uicontrol">method</span>, which is a unique ID). </li>
                                </ul>
                                <p>When the helper flow is run manually, then <span class="uicontrol">id</span> and <span class="uicontrol">execution_id</span> are null. This fact is especially useful for debugging purposes.</p>
                            </td>
                        </tr>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyE-Column1-Body1"><span class="uicontrol">Error</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyD-Column1-Body1">
Object output is assigned a value when the flow is called for error handling. See <MadCap:xref href="../build/set-error-handling.htm">Set error handling</MadCap:xref>.
                                    <p>The value of <span class="uicontrol">Error</span> corresponds to the raw error object returns by the application or action that caused the error. </p><p>For example, an object often has keys that include <span class="code">message</span>, <span class="code">statusCode</span> and <span class="code">execution</span>. The last key is the unique identifier of the flow execution that caused the error. You can then use it  to construct a URL pointing to the execution history showing the flow details that led to the error.</p></td>
                        </tr>
                        <tr class="TableStyle-standard-horizonal-borders-only-Body-Body1">
                            <td class="TableStyle-standard-horizonal-borders-only-BodyB-Column1-Body1"><span class="uicontrol">Execution ID</span>
                            </td>
                            <td class="TableStyle-standard-horizonal-borders-only-BodyA-Column1-Body1">Unique ID of&#160;the flow instance.</td>
                        </tr>
                    </tbody>
                </table>
            </p>
        </div>
    </body>
</html>