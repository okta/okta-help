<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:fileTags="Tags/okta-authors.Ian Hakes">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/learn/about-scheduled-child-flows.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <meta name="coveo:title" content="About flows in Workflows" />
        <meta name="coveo:method-description" content="There are several types of flows that you can run on the Workflows platform." />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1><a name="top"></a>Parent flows and other flow types</h1>
            <ul>
                <li>
                    <p>
                        <MadCap:xref href="#About2">About application event flows</MadCap:xref>
                    </p>
                </li>
                <li>
                    <p>
                        <MadCap:xref href="#About4">About scheduled flows</MadCap:xref>
                    </p>
                </li>
                <li>
                    <p>
                        <MadCap:xref href="#About5">About API Endpoint flows</MadCap:xref>
                    </p>
                </li>
                <li>
                    <p>
                        <MadCap:xref href="#About6">About delegated flows</MadCap:xref>
                    </p>
                </li>
            </ul>
            <p>Parent and helper flows are the two primary types of flows that you can run on the Workflows platform.</p>
            <div class="note_cautionOkta">
                <p class="noteContent">In the Workflows interface, a child flow is now referred to as a helper flow. The functionality for such flows remains unchanged. </p>
            </div>
            <p>A parent flow (the caller) can be one of the following:</p>
            <ul>
                <li>
                    <p>An event flow triggered by a third-party application event such as the Record Updated event card for the Salesforce connector</p>
                </li>
                <li>
                    <p>A Schedule flow scheduled to run at predetermined intervals</p>
                </li>
                <li>
                    <p>An API Endpoint flow that runs against a specified API endpoint</p>
                </li>
                <li>
                    <p>A delegated flow that can be assigned to and run by an admin user who is specified in the Okta Admin Console</p>
                </li>
            </ul>
            <p>A helper flow, on the other hand, can be called from any parent flow to perform a repeated action such as querying a list. Once the helper flow is called by the parent, it becomes active and runs. Otherwise, it remains inactive.</p>
            <p>In Folder view, all flows that belong to a particular folder are listed and can be sorted by type, their active status, their name, their author, their date cared, or the date when they were last edited. </p>
            <p>Note that a type is displayed for each flow in a folder.</p>
            <p>
                <img src="../../../Resources/Images/Workflows/flow-types.png" />
            </p>
            <p MadCap:conditions="Primary.do-not-publish">A helper flow is a flow that is called by another flow, also referred to as a parent flow. Helper flows are especially helpful in more advanced flows and flows that use the List functions, executing a common set of tasks, or handling errors. Note that these helper flows must be turned on before they are called by other flows. But they don't count towards your active flow limit, as they are directly dependent on other flows.</p>
            <p MadCap:conditions="Primary.do-not-publish">The helper flow can be thought of as a hierarchy system, where the parent flow is above the helper. Once the helper flow is called by the parent, it becomes active and runs. Otherwise, it remains inactive.</p>
            <h2><a name="About2"></a>Application event flows</h2>
            <p>Flows that run based on an application event run when an action takes place in Okta or a third-party application. These are basic examples of such events:</p>
            <ul>
                <li>A user is added to an application in Okta</li>
                <li>A new customer is created in Salesforce</li>
                <li>A new row is added to a Google Sheet</li>
            </ul>
            <p>Many application events, including those from Okta, are triggered in response to an incoming webhook. The external system makes an HTTP call to Workflows immediately when the specified event occurs, and that event-based flow runs.</p>
            <h2><a name="About4"></a>Scheduled flows</h2>
            <p>A scheduled flow is used to run on a schedule, such as once an hour, 5pm on Fridays, or at 9am on the first day of every month.</p>
            <p>Adding a scheduled flow event prompts you to provide the schedule details. You can change the schedule by clicking the clock icon at the bottom of the card. Note that you can similarly adjust the schedule of most application events. For example, you can set a Salesforce - New Record event to check for new records every Friday at 5pm rather than every 5 minutes.</p>
            <p>The schedule goes into effect only after the flow has been turned on.</p>
            <p>Each scheduled flow card has the following&#160;outputs:</p>
            <ul>
                <li>
                    <p><span class="uicontrol">Current Time</span>: Date and time that&#160;the current instance of the flow was initiated (in ISO UTC format). This can be passed to any text or date &amp; time input.</p>
                </li>
                <li>
                    <p><span class="uicontrol">Execution ID</span>: Unique ID of&#160;the flow instance.</p>
                </li>
            </ul>
            <h2><a name="About5"></a>API Endpoint flows</h2>
            <p>API Endpoint flows are flows that can be triggered from an outside source. Unlike flows that start with events associated with an application, these flows can be triggered at any time, so long as the client is hitting the appropriate endpoint with the appropriate security setting.</p>
            <p>The client calling the endpoint causes the flow to execute and the client receives back the output of that execution of the flow.</p>
            <p>You can expose this API endpoint in two ways:</p>
            <ul>
                <li><span class="uicontrol">Exposed as a Webhook</span>: A flow exposed at this security level will only be able to be accessed if the client making an <code>invoke</code> / <code>resume </code>/ <code>retry </code>request is passing along the proper client token along with the proper invoke URL (which includes a flow alias). For more information about client tokens and flow aliases, see <MadCap:xref href="about-flow-client-token.htm">About a flow client token</MadCap:xref> and <MadCap:xref href="about-flow-alias.htm">About a flow alias</MadCap:xref>.</li>
                <li><span class="uicontrol">Exposed as a Public Service</span>: A flow exposed at this security level will be available to anyone with the invoke URL. This invoke URL is built off of the flow alias.</li>
            </ul>
            <p>You change how you want to expose an API endpoint from the <span class="uicontrol">API Endpoint Settings</span> dialog.</p>
            <p>Once you’ve decided how you want your API Endpoint to be properly exposed, you may then invoke the flow.</p>
            <h2><a name="About6"></a>Delegated flows</h2>
            <p>To learn more about delegated flows, see <MadCap:xref href="about-delegated-flows.htm">Delegated flows</MadCap:xref>.</p>
            <h2 class="relnotes" MadCap:conditions="Primary.do-not-publish"><a name="About"></a>Helper flows</h2>
            <p MadCap:conditions="Primary.do-not-publish">Helper flows are useful in several scenarios:</p>
            <ul>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish">You have a series of steps that get used more than once in a single flow or across multiple flows. By moving that series of steps into their own "helper flow" you created them just once bit can use them repeatedly.  You run the steps from other flows by using the <MadCap:xref href="../function-reference/Flow-Control/flocontrol_spawn.htm">Call Flow</MadCap:xref> or <MadCap:xref href="../function-reference/Flow-Control/flocontrol_run.htm">Call Flow Async</MadCap:xref> functions. </p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish">You want to process a list, one item at a time. For example, you can run a series of steps on each list item using the <MadCap:xref href="../function-reference/List/list_each.htm">For Each</MadCap:xref> function&#160;or you can transform a list into a new list (one item at a time) using the <MadCap:xref href="../function-reference/List/list_map.htm">Map</MadCap:xref> function.</p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish">You just want to break a very large flow into smaller, more manageable parts.</p>
                </li>
            </ul>
            <div class="note_tipOkta">
                <p class="noteContent" MadCap:conditions="Primary.do-not-publish">Helper flows (whether active or inactive) do not ever count against a flow limit of a Workflows tenant.</p>
            </div>
            <h2 MadCap:conditions="Primary.do-not-publish"><a name="About3"></a>Helper flows with List functions</h2>
            <p MadCap:conditions="Primary.do-not-publish">Helper flows are helpful for List Functions because they allow you to go through each item of a list. These helper flows can have&#160;inputs that correspond to the type of item in the list,&#160;function&#160;perform a task on each item, and a&#160;return (found in the Control category).</p>
            <p MadCap:conditions="Primary.do-not-publish">For example, you can convert an object into a list of objects, where each key/value pair is converted to object that has <code>propertyname </code>and <code>propertyvalue </code>keys. This is a common pattern among cloud APIs. &#160;The <code>propertyname </code>also needs to be prefixed with <code>custom:</code>. &#160;You can do that with a helper flow. It accepts <span class="uicontrol">key,</span>&#160;<span class="uicontrol">value</span>, and a constant <span class="uicontrol">prefix</span> (which is the same across all iterations; the parent flow passes this in), and returns back an object with two keys.</p>
            <p MadCap:conditions="Primary.do-not-publish">That flow, when used with object.map, will turn this object:</p>
            <p MadCap:conditions="Primary.do-not-publish"><span id="cb1-2"><code>{"this":"that","up":"down","left":"right"}</code></span>
            </p>
            <p MadCap:conditions="Primary.do-not-publish">into this:</p>
            <MadCap:codeSnippet MadCap:conditions="Primary.do-not-publish">
                <MadCap:codeSnippetCopyButton />
                <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">[
{
"propertyname":"custom:this",
            
"propertyvalue":"that"
            
},
            
{
            
"propertyname":"custom:up",
            
"propertyvalue":"down"
            
},
            
{
            
"propertyname":"custom:left",
            
"propertyvalue":"right"
            
}
]</MadCap:codeSnippetBody>
            </MadCap:codeSnippet>
            <h2 class="relnotes" MadCap:conditions="Primary.do-not-publish"><a name="Outputs"></a>Outputs from helper flows</h2>
            <p MadCap:conditions="Primary.do-not-publish">Each helper flow card has the following outputs:</p>
            <ul>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Inputs to this flow</span>: Click to create custom fields, one at a time. Give each a name and data type (such as Text or Number). Each custom field you create corresponds to an expected input from any flow that calls your helper flow.</p>
                </li>
                <li>
                    <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Context</span> : The outputs in this section are automatically assigned values every time the flow runs:</p>
                    <ul>
                        <li>
                            <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Index</span>&#160;- This number output is assigned&#160;a value when the flow is called from a function that loops through the items of a list (such as the <MadCap:xref href="../function-reference/List/list_each.htm">For Each</MadCap:xref> or <MadCap:xref href="../function-reference/List/list_map.htm">Map</MadCap:xref> functions).  The value of <span class="uicontrol">Index</span>&#160;corresponds to the item's position in the list (starting with zero) processed by this particular instance of the flow.</p>
                        </li>
                        <li>
                            <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Caller</span> - The keys of the <span class="uicontrol">Caller</span> object tell you which flow called the helper flow (<span class="uicontrol">id</span> and <span class="uicontrol">name</span>), which particular execution of the flow made the call (<span class="uicontrol">execution_id</span>), and which particular step in the flow (<span class="uicontrol">method</span>, which is an unique ID). When the helper flow is manually run, then <span class="uicontrol">id</span> and <span class="uicontrol">execution_id</span> are null. This is especially useful for debugging purposes.</p>
                        </li>
                        <li>
                            <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Error</span> - This object output is assigned a value when the flow is called for error handling. See <MadCap:xref href="../build/set-error-handling.htm">Set error handling</MadCap:xref>. The value of <span class="uicontrol">Error</span> corresponds to the raw error object returns by the application or action that caused the error. For example, an object that will often have keys that include "message", "statusCode" and "execution" (the unique identifier of the flow execution that caused the error, which can be used to construct a URL to the execution history that shows the flow details that led to the error).</p>
                        </li>
                        <li>
                            <p MadCap:conditions="Primary.do-not-publish"><span class="uicontrol">Execution ID</span> - the unique ID of&#160;the flow instance.</p>
                        </li>
                    </ul>
                </li>
            </ul>
            <div class="noteOkta" MadCap:conditions="Primary.do-not-publish">
                <img src="../../../Resources/Images/assets/Icons/Notes/Help.png" class="noteImgFloat" title="Important Note" alt="Important Note" />
                <p class="noteHeading" MadCap:conditions="Primary.do-not-publish">Note</p>
                <p class="noteContent" MadCap:conditions="Primary.do-not-publish">A helper flow must be turned on before it can be called by other flows.</p>
                <p class="noteContent" MadCap:conditions="Primary.do-not-publish">Helper flows don't count towards your active flow limit since they are directly dependent on other flows.</p>
            </div>
            <p>
                <h2 MadCap:conditions="Primary.do-not-publish">Helper flows and handling errors</h2>
                <p MadCap:conditions="Primary.do-not-publish">A way to tackle Error Handling is to run another flow.</p>
                <p MadCap:conditions="Primary.do-not-publish">Run Another Flow: Stops the flow with an error, but also kicks off a helper flow of your choice. If the flow you choose accepts inputs, you’ll be able to enter values into those inputs or drag/drop an output field from earlier in the flow into any input. The flow that is called will be able to get the error details using the “Error” output field on the helper flow card.</p>
                <h2>Related topics</h2>
                <p>
                    <MadCap:xref href="../workflows-build-a-flow.htm">Build and test a Flow</MadCap:xref>
                </p>
            </p>
        </div>
    </body>
</html>