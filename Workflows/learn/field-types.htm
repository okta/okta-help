<?xml version="1.0" encoding="utf-8"?>
<html MadCap:onlyLocalStylesheets="False" MadCap:searchable="True" MadCap:fileTags="Tags/okta-authors.Ian Hakes" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Primary.do-not-publish">
    <head>
        <link rel="canonical" href="https://help.okta.com/wf/en-us/Content/Topics/Workflows/learn/field-types.htm" /><title>[%=Heading.Level1%] | Okta</title>
        <link href="" rel="stylesheet" type="text/css" />
        <meta name="coveo:title" content="About Field Types" />
        <meta name="coveo:method-description" content="All input and output fields in the Designer have a type." />
    </head>
    <body>
        <div data-content-id="hoc-main-content">
            <h1>About Field Types</h1>
            <h2>Data Types</h2>
            <p>All input and output fields in the Designer have a type. There are five basic types in Designer: <span class="uicontrol">Text</span>, <span class="uicontrol">Number</span>, <span class="uicontrol">True/False</span>, <span class="uicontrol">Date &amp;Time</span>, and <span class="uicontrol">File</span>.</p>
            <p>When working with input fields and output fields, it’s important to be mindful of the types. The type system is what allows or prevents certain behaviors.</p>
            <h3>Text
        </h3>
            <p>A sequence of characters.</p>
            <p>Examples:</p>
            <p><code>Free Mars</code>, <code>Hello, World!</code>, <code>12345</code></p>
            <p>You can also have a single space  (length 1) or frequently a text input or output may be empty (length is 0).</p>
            <h3>Number</h3>
            <p>An integer or decimal.</p>
            <p>Examples:</p>
            <p><code>12345</code>, <code>1</code>, <code>-10</code>, <code>0.543</code></p>
            <h3>True/False</h3>
            <p>These inputs always have one of two values: either <span class="uicontrol">true</span> or <span class="uicontrol">false</span>.</p>
            <p>If you send a True/False output to a text input, it will convert to the word "true" or the word "false". If you send text output to a True/False input, any word other than "false" converts to true. If you send a number, then any value other than zero converts to true.</p>
            <h2>Special Types
        </h2>
            <p>Beyond these basic types, there are also two special types, <span class="uicontrol">List</span>&#160;and <span class="uicontrol">Object</span>. These types are composites of the other types.</p>
            <p>A list is a collection of items all of the same type. An object is a collection of keys and values, where each value is of a certain type. Unlike lists, objects can contain values of many different types.</p>
            <p>A list has the structure: <code>[ 'nitrogen', 'oxygen', 'argon' ]</code></p>
            <p>Here ‘nitrogen’, ‘oxygen’, and ‘argon’ represent three text items in a list.</p>
            <p>An object has the structure: <code>{“lastName”: “Russell”, “firstName”: “Saxifrage”}</code></p>
            <p>In the above example, “lastName” and “firstName” are the keys in the object. The corresponding values are “Russell” and “Saxifrage”.</p>
            <p>Items in a list are often represented as contained between brackets []. Similarly, you can distinguish an object by its use of braces {}.</p>
            <h2>The Right Types</h2>
            <p>Type mismatches occur when the Designer expects a certain type but does not receive it. Most of the time, the Designer will prevent you from making these sorts of errors. However, they can occur with more advanced use of the Designer, so it’s important to be mindful of the overall type system.</p>
            <p>Both input fields and output fields have a type. However, input fields and output fields each handle types differently.</p>
            <h3>Types: Input Fields</h3>
            <p>For an input field, if a certain type is specified, the card will try to automatically convert an incoming value to that type. For example, if you were to pass the text <code>1/1/18</code> as an input to a field that was set to the type Date &amp; Time, the card will automatically convert this value to the appropriate type.</p>
            <h3>Types: Output Fields       </h3>
            <p>Output fields, however, behave differently. Output fields expect you, the user, to be honest about what they are. If you specify that an output field is of the type “Text”, the Designer will expect that the value contained within this output field is text. In the circumstance that the output field value does not match its type, a type conversion error will be thrown.</p>
            <p>Many of the available functions in the Designer already specify both the type of the input field and the output field and do not allow you to change these types. The Designer will often know what type both the inputs and outputs should be. In this circumstance, worrying about types is unnecessary.</p>
            <p>However, in circumstances where the Designer doesn’t explicitly know either the input or the output field values, types play a large role.</p>
        </div>
    </body>
</html>